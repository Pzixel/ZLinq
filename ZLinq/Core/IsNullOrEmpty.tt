<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
		<# foreach (var sourceType in TextTemplate.WithNonGen(TextTemplate.StandardCollections))
		{ 
		#>[Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsNullOrEmpty<#= TextTemplate.GetConstraint(sourceType) #>(this <#= sourceType #> source)
        {
            return source == null || source.<#= TextTemplate.LengthOrCount(sourceType)#> == 0;
        }

		<#}
		#>[Pure]
        public static bool IsNullOrEmpty<T>(this IEnumerable<T> source)
        {
            if (source == null)
			{
			   return true;
			}
			using (var enumerator = source.GetEnumerator())
			{
			    if (enumerator.MoveNext())
				    return false;
			}
			return true;
        }

		[Pure]
        public static bool IsNullOrEmpty(this IEnumerable source)
        {
            if (source == null)
            {
                return true;
            }
            var enumerator = source.GetEnumerator();
            return !enumerator.MoveNext();
        }

		[Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsNullOrEmpty(this string s)
        {
            return string.IsNullOrEmpty(s);
        }
    }
}
