<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;
using ZLinq.Extension;

// ReSharper disable CheckNamespace
namespace ZLinq
{
	[SuppressMessage("ReSharper", "PossibleMultipleEnumeration")]
    public static partial class ZEnumerable
    {     		
		<# foreach (var sourceType in TextTemplate.StandardLists) 
		{ #>		
		   	    
		[Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
	   	public static T First<T>([NotNull] this <#= sourceType #> source)
        {
			return <#= TextTemplate.Cast(sourceType) #>source[0];
        }	 	

		[Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
	    public static T FirstOrDefault<T>([NotNull] this <#= sourceType #> source)
        {
			return source.<#= TextTemplate.LengthOrCount(sourceType) #> == 0 ? default(T) : <#= TextTemplate.Cast(sourceType) #>source[0];
        }		
		<# } #>		
		<# foreach (var sourceType in TextTemplate.StandardEnumerables) 
		{ #>		

		[Pure]
		public static T First<T>([NotNull] this <#= sourceType #> source, [NotNull] Predicate<T> predicate)
        {
			<#= TextTemplate.IsNotNull("source") #>
			<#= TextTemplate.IsNotNull("predicate") #>
		    foreach (T value in source)
		    {
		        if (predicate(value))
		            return value;
		    }
		    throw new InvalidOperationException();
        }
		   	    
		[Pure]
	    public static T FirstOrDefault<T>([NotNull] this <#= sourceType #> source, [NotNull] Predicate<T> predicate)
        {
			<#= TextTemplate.IsNotNull("source") #>
			<#= TextTemplate.IsNotNull("predicate") #>
		    foreach (T value in source)
		    {
		        if (predicate(value))
		            return value;
		    }
		    return default(T);
        }
		<# } #>		
    }
}
