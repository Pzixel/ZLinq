<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using JetBrains.Annotations;
using ZLinq.Class;
using ZLinq.Comparers;
using ZLinq.Extension;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {
    <# foreach(string suffix in new[] {"", "Neg"}) { 
        string name = suffix.Replace("Neg", "Descending"); #>
        <# foreach (string sourceType in TT.CollectionClasses) { #>

        [Pure]
        [NotNull]
        public static IZOrderedEnumerable<T> OrderByInPlace<#= name #><T, TProperty>([NotNull] this <#= sourceType #> source, [NotNull] Expression<Func<T, TProperty>> member) where TProperty : IComparable<TProperty>
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("member") #>
            return new ZOrdered<#=  TT.GetCollectionName(sourceType)#><T>(source, ZComparer<T>.New<#= suffix #>(member));
        }

        <# } #>

        [Pure]
        [NotNull]
        public static IZOrderedEnumerable<T> ThenBy<#= name #><T, TProperty>([NotNull] this IZOrderedEnumerable<T> source, Expression<Func<T, TProperty>> member) where TProperty : IComparable<TProperty>
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("member") #>
            return source.AppendComparer(source.Comparer.Add<#= suffix #>(member));
        }
   <# } #>
    }
}
