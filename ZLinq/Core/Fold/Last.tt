<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using JetBrains.Annotations;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {
		<#  var templates = new[]
			{
				new 
				{
					Suffix = "",
					NoMatch = "throw Error.EmptyCollection",
					NoMatchMap = "throw Error.NoMatchingElement",
					Comment = Environment.NewLine + "		/// <exception cref=\"InvalidOperationException\">Throws when collection has no elements</exception>",
					CommentMap = Environment.NewLine + "		/// <exception cref=\"InvalidOperationException\">Throws when collection has no elements matching the predicate</exception>" ,
					FlagInit = "bool flag = false;",
					FlagAssign = "flag = true;",
					FlagUsage = "if (!flag) throw Error.NoMatchingElement;"
				},
				new 
				{
					Suffix = "OrDefault",
					NoMatch = "return default(T)",
					NoMatchMap = "return default(T)",
					Comment = "",
					CommentMap = "",
					FlagInit = "",
					FlagAssign = "",
					FlagUsage = ""
				}
			};#>		
			<# foreach (var template in templates) { #>
			<# foreach (var sourceType in TT.StandardLists) {#>        
                   
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.Comment #>
        [Pure]
        public static T Last<#= template.Suffix #><T>([NotNull, Pure] this <#= sourceType #> source)
        {
			<#= "source".IsNotNull() #>
			int lengthOrCount = source.<#= TT.LengthOrCount(sourceType) #>;
			if (lengthOrCount == 0)
			   <#= template.NoMatch #>;
            return source[lengthOrCount - 1];
        }        

		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.CommentMap #>
        [Pure]
        public static T Last<#= template.Suffix #><T>([NotNull, Pure] this <#= sourceType #> source, [NotNull, Pure] Predicate<T> predicate)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("predicate") #>
            for (int i = source.<#= TT.LengthOrCount(sourceType) #> - 1; i >= 0; i--)
            {
                T obj = source[i];
                if (predicate(obj))
                    return obj;
            }
            <#= template.NoMatchMap #>;
        }

        <# } #>        
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.Comment #>
        [Pure]
        public static T Last<#= template.Suffix #><T>([NotNull, Pure] this ICollection<T> source)
        {
            <#= TT.IsNotNull("source") #>
            if (source.Count == 0)
			   <#= template.NoMatch #>;
            return LastHasElements(source);
        }
		
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.CommentMap #>
        [Pure]
        public static T Last<#= template.Suffix #><T>([NotNull, Pure] this ICollection<T> source, [NotNull, Pure] Predicate<T> predicate)
        {
            var list = source as IList<T>;
            if (list != null)
            {
                return list.Last(predicate);
            }

            source.IsNotNull("source");
            predicate.IsNotNull("predicate");
            T result = default(T);
            <#= template.FlagInit #>
            foreach (var value in source)
            {
                if (predicate(value))
                {
                    result = value;
                    <#= template.FlagAssign #>
                }
            }
            <#= template.FlagUsage #>
            return result;
        }

		<# } #>
			
		        
        private static T LastHasElements<T>(ICollection<T> source)
        {
            var list = source as IList<T>;
            if (list != null)
            {
                return list.Last();
            }
            using (var enumerator = source.GetEnumerator())
            {
                enumerator.MoveNext();
                T current = enumerator.Current;
                while (enumerator.MoveNext())
                {
                    current = enumerator.Current;
                }
                return current;
            }
        }

    }
}
