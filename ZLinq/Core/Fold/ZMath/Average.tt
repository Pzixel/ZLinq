<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using JetBrains.Annotations;
using ZLinq.Common;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
// ReSharper disable RedundantCast
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
    <#foreach (var type in TT.WithNullables(TT.OverflowableTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) {
              foreach(string mapFunc in TT.MapFuncs) {
                  bool isNotMap = mapFunc == string.Empty;
                  string collectionType = isNotMap ? sourceType.To(type) : sourceType; 
                  string secondParam = isNotMap ? "" : string.Format(", [NotNull] Func<T, {0}> {1}", type, mapFunc);
                  string secondParamCall = isNotMap ? "" : string.Format(mapFunc);
                  string comment = isNotMap? "" : Environment.NewLine + "		/// <param name=\"mapFunc\">Function that maps each element of source to perform search</param>";				  
                  string checkMap = isNotMap ? "" : TT.IsNotNull(mapFunc);
                  string generic = isNotMap ? "" : "<T>"; #>    
                
		/// <summary>
        /// Calculates average of collection <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param><#= comment #>		
		/// <exception cref="InvalidOperationException">Throws when collection is empty</exception>
		[Pure]
        public static double Average<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>)
        {
            <#= TT.IsNotNull("source") #>
            <#= checkMap #>
            source.IsNotEmpty();
            try
            {
                double sum = (double) source.Sum(<#= secondParamCall #>);
                return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            catch (OverflowException)
            {
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(arg => (double) <#= TT.UnwrapNullable(type, secondParamCall + "(arg)") #>*mult);
            }
            catch (AggregateException ex)
            {
                if (!(ex.InnerException is OverflowException))
                    throw;
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(arg => (double) <#= TT.UnwrapNullable(type, secondParamCall + "(arg)") #>*mult);
            }
        }

        <# } #>
		<# } #>

        #endregion
    <# } #>    

       <#foreach (var type in TT.WithNullables(TT.UnoverflowableTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        {               
			foreach(string mapFunc in TT.MapFuncs) {
                  bool isNotMap = mapFunc == string.Empty;
                  string collectionType = isNotMap ? sourceType.To(type) : sourceType; 
                  string secondParam = isNotMap ? "" : string.Format(", [NotNull] Func<T, {0}> {1}", type, mapFunc);
                  string secondParamCall = isNotMap ? "" : string.Format(mapFunc);
                  string comment = isNotMap? "" : Environment.NewLine + "		/// <param name=\"mapFunc\">Function that maps each element of source to perform search</param>";				  
                  string checkMap = isNotMap ? "" : TT.IsNotNull(mapFunc);
                  string generic = isNotMap ? "" : "<T>"; #>           /// <summary>
        /// Calculates average of collection <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Average of all elements</returns>
        [Pure]
        public static double Average<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>)        
        {
            <#= TT.IsNotNull("source") #>
            <#= checkMap #>
            source.IsNotEmpty();
            double sum = source.Sum(<#= secondParamCall #>);
            if (!double.IsInfinity(sum))
            {
               return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
            return source.Sum(arg => <#= TT.UnwrapNullable(type, secondParamCall + "(arg)") #>*mult);
        }
		<# } #>
        <# } #>

        #endregion
    <# } #>    
    }
}
