<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Threading.Tasks;
using JetBrains.Annotations;
using ZLinq.Common;
using ZLinq.CommonInternal;


// ReSharper disable CheckNamespace 
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
    <#foreach (var type in TT.WithNullables(TT.NumberTypes)) { 
        
        string resType = type.TrimEnd('?');
        string suffix = type != resType ? ".GetValueOrDefault()" : ""; #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        { 
            const string funcName = "mapFunc";
            foreach(string mapFunc in new[] {"", funcName}) {
                bool isNotMap = mapFunc == string.Empty;
                string collectionType = isNotMap ? sourceType.To(type) : sourceType; 
                string secondParam = isNotMap ? "" : string.Format(", [NotNull] Func<T, {0}> {1}", type, mapFunc);
                string secondParamCall = isNotMap ? "" : string.Format(", {0}", mapFunc);
                string comment = isNotMap? "" : Environment.NewLine + "/// <param name=\"mapFunc\">Function that maps each element of source to perform search</param>";
                string checkMap = isNotMap ? "" : TT.IsNotNull(mapFunc);
                string generic = isNotMap ? "" : "<T>"; 
        #>    
        /// <summary>
        /// Perform checked summing of source collection
        /// </summary>
        /// <param name="source">Source collection</param><#= comment #>
        /// <returns>Sum of all elements</returns>
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception>
		/// <exception cref="OverflowException">Throws when result value is bigger than MaxValue</exception>
        [Pure]
        public static <#= resType #> Sum<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>)
        {
            <#= TT.IsNotNull("source") #>
            <#= checkMap #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
                return Sum(source<#= secondParamCall #>, 0, source.<#= TT.LengthOrCount(sourceType) #>);
            <#= resType #> result = 0;
            object syncRoot = new object();  
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                        range => {
                        var x = Sum(source<#= secondParamCall #>, range.Item1, range.Item2);
                        checked
                        {   
                            lock (syncRoot)
                                result += x;  
                        }     
                    });   

            return result;
        }

        [Pure]
        private static <#= resType #> Sum<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>, int startIndex, int endIndex)
        {
            <# foreach(int j in TT.Unroll) { 
            #><#= type #> sum<#=j#> = 0;
            <# } #>  
            checked
            {
                int i;
                int loopEnd = endIndex - Constants.Step + 1;
                for (i = startIndex; i < loopEnd; i += Constants.Step)
                {
                <# foreach(int j in TT.Unroll) { 
                #>    sum<#= j #> += <#= TT.Envelope(mapFunc, string.Format("source[i + {0}]", j)) #><#= suffix #>;
                <# } #>

                }
                if (i == endIndex)
                    return  (<#= resType #>) (sum0 + sum1 + sum2 + sum3);
                if (i == endIndex - 1)
                    return  (<#= resType #>) (sum0 + sum1 + sum2 + sum3 + <#= TT.Envelope(mapFunc, "source[i]") #><#= suffix #>);
                if (i == endIndex - 2)
                    return  (<#= resType #>) (sum0 + sum1 + sum2 + sum3 + <#= TT.Envelope(mapFunc, "source[i]") #><#= suffix #> + <#= TT.Envelope(mapFunc, "source[i+1]") #><#= suffix #>);
                return  (<#= resType #>) (sum0 + sum1 + sum2 + sum3 + <#= TT.Envelope(mapFunc, "source[i]") #><#= suffix #> + <#= TT.Envelope(mapFunc, "source[i+1]") #><#= suffix #> + <#= TT.Envelope(mapFunc, "source[i+2]") #><#= suffix #>);
            }
        }
        <# } #>
        <# } #>

        #endregion
    <# } #>    
    
    }
}
