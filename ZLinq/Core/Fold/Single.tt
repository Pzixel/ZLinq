<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using JetBrains.Annotations;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {
		<#  var templates = new[]
			{
				new 
				{
					Suffix = "",
					NoMatch = "throw Error.EmptyCollection",
					NoMatchMap = "throw Error.NoMatchingElement",
					Comment = Environment.NewLine + "		/// <exception cref=\"InvalidOperationException\">Throws when collection has no elements</exception>",
					CommentMap = Environment.NewLine + "		/// <exception cref=\"InvalidOperationException\">Throws when collection has no elements matching the predicate</exception>" 
				},
				new 
				{
					Suffix = "OrDefault",
					NoMatch = "return default(T)",
					NoMatchMap = "return default(T)",
					Comment = "",
					CommentMap = ""
				}
			};#>	
		<# foreach (var template in templates) {#>
        <# foreach (var sourceType in TT.StandardLists) 
        { #>        
        
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception>           
        [Pure]
        public static T Single<#= template.Suffix #><T>([NotNull] this <#= sourceType #> source)
        {
			<#= "source".IsNotNull() #>            
            source.HasSingleElement();
			if (source.<#= TT.LengthOrCount(sourceType) #> == 0)
			   <#= template.NoMatch #>;
            return <#= TT.Cast(sourceType) #>source[0];
        }       
    
        <# } #>    
		
		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception>
        [Pure]
        public static T Single<#= template.Suffix #><T>([NotNull] this ICollection<T> source)
        {
			<#= "source".IsNotNull() #>
            var list = source as IList<T>;
            if (list != null)
            {
                return list.Single<#= template.Suffix #>();
            }

            source.HasSingleElement();
			if (source.Count == 0)
			   <#= template.NoMatch #>;
            using (var enumerator = source.GetEnumerator())
            {
                enumerator.MoveNext();
                return enumerator.Current;
            }
        }

        <# foreach (var sourceType in TT.Foreachable) 
        { #>        

		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.CommentMap #>
        [Pure]
        public static T Single<#= template.Suffix #><#= sourceType.UnLinq() #><T>([NotNull] this <#= sourceType #> source, [NotNull] Predicate<T> predicate)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("predicate") #>
            T result = default(T);
            bool found = false;
            foreach (T value in source)
            {
                if (predicate(value))
                {
                    if (found)
                        throw Error.MultipleElementsCollection;
                    result = value;    
                    found = true;
                }
            }
            if (!found)
                <#= template.NoMatchMap #>;
            return result;
        }		
		<# } #>

		/// <exception cref="ArgumentNullException">Throws when null is passed as input parameter</exception><#= template.CommentMap #>
        [Pure]
		public static T Single<#= template.Suffix #><T>([NotNull] this ICollection<T> source, [NotNull] Predicate<T> predicate)
		{
		   return source.Single<#= template.Suffix #>Seq(predicate);
		}
        <# } #>        

    }
}
