<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using JetBrains.Annotations;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {
		<# foreach (var reaction in new Dictionary<string, string> { {"", "throw Error.EmptyCollection"}, {"OrDefault", "return default(T)"} }) {#>
        <# foreach (var sourceType in TT.StandardLists) 
        { #>        
                   
        [Pure]
        public static T Single<#= reaction.Key #><T>([NotNull] this <#= sourceType #> source)
        {
			<#= "source".IsNotNull() #>            
            source.HasSingleElement();
			if (source.<#= TT.LengthOrCount(sourceType) #> == 0)
			   <#= reaction.Value #>;
            return <#= TT.Cast(sourceType) #>source[0];
        }       
    
        <# } #>    
		
        [Pure]
        public static T Single<#= reaction.Key #><T>([NotNull] this ICollection<T> source)
        {
			<#= "source".IsNotNull() #>
            var list = source as IList<T>;
            if (list != null)
            {
                return list.Single<#= reaction.Key #>();
            }

            source.HasSingleElement();
			if (source.Count == 0)
			   <#= reaction.Value #>;
            using (var enumerator = source.GetEnumerator())
            {
                enumerator.MoveNext();
                return enumerator.Current;
            }
        }

        <# foreach (var sourceType in TT.Foreachable) 
        { #>        

        [Pure]
        public static T Single<#= reaction.Key #><T>([NotNull] this <#= sourceType #> source, [NotNull] Predicate<T> predicate)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("predicate") #>
            T result = default(T);
            bool found = false;
            foreach (T value in source)
            {
                if (predicate(value))
                {
                    if (found)
                        throw Error.MultipleElementsCollection;
                    result = value;    
                    found = true;
                }
            }
            if (!found)
                <#= reaction.Value #>;
            return result;
        }		
		<# } #>
        <# } #>        

    }
}
