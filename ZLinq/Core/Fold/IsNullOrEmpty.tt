<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
        <# foreach (var sourceType in TT.WithNonGen(TT.StandardCollections))
        { 
        #>[Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ContractAnnotation("source:null => true; source:notnull => false")]
        public static bool IsNullOrEmpty<#= TT.GetConstraint(sourceType) #>([CanBeNull] this <#= sourceType #> source)
        {
            return source == null || source.<#= TT.LengthOrCount(sourceType)#> == 0;
        }

        <#}
        #>
        [Pure]
        [ContractAnnotation("source:null => true; source:notnull => false")]
        public static bool IsNullOrEmpty<T>([CanBeNull] this IEnumerable<T> source)
        {
            if (source == null)
            {
               return true;
            }
            using (var enumerator = source.GetEnumerator())
            {
                if (enumerator.MoveNext())
                    return false;
            }
            return true;
        }

        [Pure]
        [ContractAnnotation("source:null => true; source:notnull => false")]
        public static bool IsNullOrEmpty([CanBeNull] this IEnumerable source)
        {
            if (source == null)
            {
                return true;
            }
            var enumerator = source.GetEnumerator();
            return !enumerator.MoveNext();
        }

        [System.Diagnostics.Contracts.Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ContractAnnotation("source:null => true; source:notnull => false")]
        public static bool IsNullOrEmpty([CanBeNull] this string source)
        {
            return string.IsNullOrEmpty(source);
        }
    }
}
