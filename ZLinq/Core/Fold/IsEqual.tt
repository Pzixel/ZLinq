<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {   
        <# var conditions = new []
        {
            new {Constraint = "where T : IEquatable<T>", Description = "", NameSuffix = ""},
            new {Constraint = "", Description = ". Use Object.Equals for equality comparasion", NameSuffix = "Memberwise"}
        }; 
        
        foreach(var overload in conditions)
        {
            foreach (var sourceType in TT.StandardLists) { #>        
        
        /// <summary>
        ///    Check if collections are equal<#= overload.Description #> 
        /// </summary>
        /// <typeparam name="T">IEquatable collection</typeparam>
        /// <param name="x">first collection</param>
        /// <param name="y">second collection</param>
        /// <returns>true if collections are equal</returns> 
        [Pure]
        public static bool IsEqual<#= overload.NameSuffix #><T>(this <#= sourceType #> x, <#= sourceType #> y) <#= overload.Constraint #> 
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            int length = x.<#= TT.LengthOrCount(sourceType) #>;
            if (length != y.<#= TT.LengthOrCount(sourceType) #>)
                return false;
            int i;
            for (i = 0; i < length; i++) 
            {
                if (!x[i].Equals(y[i]))
                    return false;
            }
            return true;
        }

        <# } #>        

        /// <summary>
        ///    Check if collections are equal<#= overload.Description #> 
        /// </summary>
        /// <typeparam name="T">IEquatable collection</typeparam>
        /// <param name="x">first collection</param>
        /// <param name="y">second collection</param>
        /// <returns>true if collections are equal</returns> 
        [Pure]
        public static bool IsEqual<#= overload.NameSuffix #><T>(this ICollection<T> x, ICollection<T> y) <#= overload.Constraint #> 
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            int length = x.Count;
            if (length != y.Count)
                return false;
            using (var xEnum = x.GetEnumerator())
            using (var yEnum = y.GetEnumerator())
            {
                while (xEnum.MoveNext() && yEnum.MoveNext())
                {
                    if (!xEnum.Current.Equals(yEnum.Current))
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        <# } #>    
    }
}
