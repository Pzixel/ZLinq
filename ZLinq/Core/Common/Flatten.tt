<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using JetBrains.Annotations;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    [SuppressMessage("ReSharper", "LoopCanBeConvertedToQuery")]
    public static partial class ZEnumerable
    {
        <# for(int i = 1; i < 10; i++) { 
        #>[Pure]
        [NotNull]
        public static IEnumerable<T> Flatten<T>([NotNull] this T[<#= new string(',',i) #>] array)
        {
            foreach (T value in array)
                yield return value;
        }        

        <# } #>

        <# for(int i = 1; i < 10; i++) { 
        #>[Pure]
        [NotNull]
        public static T[] FlattenToArray<T>([NotNull] this T[<#= new string(',',i) #>] array)
        {
            <#= TT.IsNotNull("array") #>
            var result = new T[array.Length];
            int i = 0;
            foreach (T value in array)
                result[i++] = value;
            return result;
        }    

        <# } #>

    }
}