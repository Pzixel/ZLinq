<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using ZLinq.CommonInternal;

// ReSharper disable CheckNamespace
namespace ZLinq
{
    public static partial class ZEnumerable
    {                    
        <# foreach (var sourceType in TT.StandardLists) 
        { #>        

        /// <summary>
        /// Fisher-Yates algorithm
        /// </summary>    
        public static void Shuffle<T>([NotNull] this <#= sourceType #> source, int? seed = null)
        {
            <#= TT.IsNotNull("source") #>

            if (source.<#=TT.LengthOrCount(sourceType)#> == 0)
                return;
            int value = seed ?? Environment.TickCount ^ source[0].GetHashCode();
            Random rand = new Random(value);
            for (int i = source.<#=TT.LengthOrCount(sourceType)#> - 1; i > 0; i--) {
                int j = rand.Next(0, i + 1);
                T tmp = source[i];
                source[i] = source[j];
                source[j] = tmp;
            }
        }

        [Pure]
        [NotNull]
        public static T[] GetShuffle<T>([NotNull] this <#= sourceType #> source, int? seed = null)
        {
            <#= TT.IsNotNull("source") #>

            T[] result = new T[source.<#=TT.LengthOrCount(sourceType)#>];
            source.CopyTo(result, 0);
            result.Shuffle(seed);
            return result;
        }
        <# } #>        
    }
}
