<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading.Tasks;
using JetBrains.Annotations;
using ZLinq.Common;

// ReSharper disable CheckNamespace
// ReSharper disable RedundantCast
namespace ZLinq
{
    public static partial class ZEnumerable
    {

<#foreach (var type in TT.WithNullables(TT.NumberTypes)) {
    bool isNullable = TT.IsNullable(type);
    string max = isNullable ? "Max" : "Math.Max";
    Func<string, string> hasValueCheck = isNullable ? new Func<string, string>(s => s + ".HasValue &&") : new Func<string, string>(s => "");
    string valuePrefix = isNullable ? ".Value" : "";
 #>
        
        <# if (isNullable) { #>
        [Pure]
        private static <#= type #> Max(<#= type #> x, <#= type #> y)
        {
            bool hasValX = x.HasValue;
            bool hasValY = y.HasValue;
            if (hasValX && hasValY)
                return Math.Max(x.Value, y.Value);
            if (hasValX)
                return x.Value;
            return y.GetValueOrDefault();            
        }
        <# } #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        {            
        #>
        
        /// <summary>
        /// Search max value in collection or zero if all items are null
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Maximum value of collection</returns>
        [Pure]
        public static <#= type #> Max([NotNull] this <#= sourceType.Replace("T", type) #> source)
        {
            <#= TT.IsNotNull("source") #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
            {
                switch (source.<#= TT.LengthOrCount(sourceType) #>)
                {
                    case 0:
                        return 0;
                    case 1:
                        return source[0];
                    case 2:
                        return <#= max #>(source[0], source[1]);
                    case 3:
                        return <#= max #>(source[0], <#= max #>(source[1], source[2]));
                    case 4:
                        return <#= max #>(<#= max #>(source[0], source[1]), <#= max #>(source[2], source[3]));   
                    default:
                        return Max(source, 0, source.<#= TT.LengthOrCount(sourceType) #>);
                }            
            }
            <#= type #> result = source.FirstOrDefault();
            object syncRoot = new object();
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                range => 
                {
                    var x = Max(source, range.Item1, range.Item2);
                    lock (syncRoot)
                        if (result < x)
                            result = x;
                });

            return result;
        }

        [Pure]
        private static <#= type #> Max([NotNull] this <#= sourceType.Replace("T", type) #> source, int startIndex, int endIndex)
        {
            <#= type #> max0 = source[startIndex], max1 = source[startIndex + 1], max2 = source[startIndex + 2], max3 = source[startIndex + 3];
            int i;
            int loopEnd = endIndex - Constants.Step + 1;
            for (i = startIndex; i < loopEnd; i += Constants.Step)
            {
                <# for(int j = 0; j < 4; j++) { 
                #><#= type #> arg<#= j #> = source[i + <#= j #>];
                if (<#= hasValueCheck("arg" + j) #> max<#= j #> < arg<#= j #>)
                    max<#= j #> = arg<#= j #><#= valuePrefix #>;
                <# } #>

            }
            if (i == source.<#= TT.LengthOrCount(sourceType) #>)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3));
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 1)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), source[i]);
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 2)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(source[i], source[i + 1]));
            return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(source[i], <#= max #>(source[i + 1], source[i + 2])));
        } 

        /// <summary>
        /// Search max value in mapped collection or zero if all items are null
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <param name="mapFunc">Function that maps each element of source to perform search</param>
        /// <returns>Maximum value of mapping</returns>
        [Pure]
        public static <#= type #> Max<T>([NotNull] this <#= sourceType #> source, [NotNull] Func<T, <#= type #>> mapFunc)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("mapFunc") #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
            {
                switch (source.<#= TT.LengthOrCount(sourceType) #>)
                {
                    case 0:
                        return 0;
                    case 1:
                        return mapFunc(source[0]);
                    case 2:
                        return <#= max #>(mapFunc(source[0]), mapFunc(source[1]));
                    case 3:
                        return <#= max #>(mapFunc(source[0]), <#= max #>(mapFunc(source[1]), mapFunc(source[2])));
                    case 4:
                        return <#= max #>(<#= max #>(mapFunc(source[0]), mapFunc(source[1])), <#= max #>(mapFunc(source[2]), mapFunc(source[3])));   
                    default:
                        return Max(source, mapFunc, 0, source.<#= TT.LengthOrCount(sourceType) #>);
                }            
            }                
            <#= type #> result = mapFunc(source.First());
            object syncRoot = new object();
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                range => 
                {
                    var x = Max(source, mapFunc, range.Item1, range.Item2);
                    lock (syncRoot)
                        if (result < x)
                            result = x;
                });

            return result;
        }

        [Pure]
        private static <#= type #> Max<T>([NotNull] this <#= sourceType #> source, [NotNull] Func<T, <#= type #>> mapFunc, int startIndex, int endIndex)
        {
            <#= type #> max0 = mapFunc(source[startIndex]), max1 = mapFunc(source[startIndex + 1]), max2 = mapFunc(source[startIndex + 2]), max3 = mapFunc(source[startIndex + 3]);
            int i;
            int loopEnd = endIndex - Constants.Step + 1;
            for (i = startIndex; i < loopEnd; i += Constants.Step)
            {
                <# for(int j = 0; j < 4; j++) { 
                #><#= type #> arg<#= j #> = mapFunc(source[i + <#= j #>]);
                if (<#= hasValueCheck("arg" + j) #> max<#= j #> < arg<#= j #>)
                    max<#= j #> = arg<#= j #><#= valuePrefix #>;
                <# } #>

            }
            if (i == source.<#= TT.LengthOrCount(sourceType) #>)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3));
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 1)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), mapFunc(source[i]));
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 2)
                return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(mapFunc(source[i]), mapFunc(source[i + 1])));
            return <#= TT.ExplicitCastFromIntIfNeeded(type) #> <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(mapFunc(source[i]), <#= max #>(mapFunc(source[i + 1]), mapFunc(source[i + 2]))));
        } 
        <# } #>
        
    #endregion
<# } #>    
    }
}
