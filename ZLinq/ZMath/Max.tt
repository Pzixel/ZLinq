<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading.Tasks;
using JetBrains.Annotations;
using ZLinq.Common;

// ReSharper disable CheckNamespace
// ReSharper disable RedundantCast
namespace ZLinq
{
    public static partial class ZEnumerable
    {               
<# string funcName = "mapFunc"; #>
    
<#foreach (var type in TT.WithNullables(TT.NumberTypes)) {
    bool isNullable = TT.IsNullable(type);
    string max = isNullable ? "Max" : "Math.Max";
    string valuePrefix = isNullable ? ".Value" : "";
    Func<string, string, string> isHigher = isNullable ? new Func<string, string, string>((maxName, candidate) => TT.GetMaxNullable(maxName, candidate)) : (maxName, candidate) => maxName + " < " + candidate;
    Func<string, string, string> isHigherNoCheck = isNullable ? new Func<string, string, string>((maxName, candidate) => TT.GetMaxNullableNoCheck(maxName, candidate)) : (maxName, candidate) => maxName + " < " + candidate;
 #>
        
        <# if (isNullable) { #>
        [Pure]
        private static <#= type #> Max(<#= type #> x, <#= type #> y)
        {
            bool hasValX = x.HasValue;
            bool hasValY = y.HasValue;
            if (hasValX && hasValY)
                return Math.Max(x.Value, y.Value);
            if (hasValX)
                return x.Value;
            return y.GetValueOrDefault();            
        }
        <# } #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) {
              foreach(string mapFunc in new[] {"", funcName}) {
                  bool isNotMap = mapFunc == string.Empty;
                  string collectionType = isNotMap ? sourceType.Replace("T", type) : sourceType; 
                  string secondParam = isNotMap ? "" : string.Format(", [NotNull] Func<T, {0}> {1}", type, mapFunc);
                  string secondParamCall = isNotMap ? "" : string.Format(", {0}", mapFunc);
                  string comment = isNotMap? "" : Environment.NewLine + "/// <param name=\"mapFunc\">Function that maps each element of source to perform search</param>";
                  string checkMap = isNotMap ? "" : TT.IsNotNull(mapFunc);
                  string generic = isNotMap ? "" : "<T>"; #>      

        /// <summary>
        /// Search max value in mapped collection or zero if all items are null
        /// </summary>
        /// <param name="source">Source collection</param><#= comment #>        
        /// <returns>Maximum value of mapping</returns>
        [Pure]
        public static <#= type #> Max<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>)
        {
            <#= TT.IsNotNull("source") #>
            <#= checkMap #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
            {
                return Max(source<#= secondParamCall #>, 0, source.<#= TT.LengthOrCount(sourceType) #>);         
            }                
            <#= type #> result = <#= TT.Envelope(mapFunc, "source.First()") #>;
            object syncRoot = new object();
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                range => 
                {
                    var x = Max(source<#= secondParamCall #>, range.Item1, range.Item2);
                    if (<#= isHigher("result", "x") #>)
                    {
                        lock (syncRoot)
                        {
                            if (<#= isHigherNoCheck("result", "x") #>)
                                result = x;
                        }
                    }
                });

            return result;
        }

        [Pure]
        private static <#= type #> Max<#= generic #>([NotNull] this <#= collectionType #> source<#= secondParam #>, int startIndex, int endIndex)
        {
            int diff = endIndex - startIndex;
            if (diff <= Constants.Step)
            {
                switch (diff)
                {   <#  
                    var recursion = new Recursion(max, i => TT.Envelope(mapFunc, string.Format("source[{0}]", i)));
                    foreach(int j in TT.UnrollInclusive) { #>  
                case <#= j #>:
                    return <#= recursion.Apply(j) #>;<# } #>    
                }
            }
            <# foreach(int j in TT.Unroll) { 
            #><#= type #> max<#=j#> = <#= TT.Envelope(mapFunc, string.Format("source[startIndex + {0}]", j)) #>;
            <# } #>  
          
            int i;
            int loopEnd = endIndex - Constants.Step + 1;
            for (i = startIndex; i < loopEnd; i += Constants.Step)
            {
                <# foreach(int j in TT.Unroll) { 
                #><#= type #> arg<#= j #> = <#= TT.Envelope(mapFunc, string.Format("source[i + {0}]", j)) #>;
                if (<#= isHigher("max" + j, "arg" + j) #>)
                    max<#= j #> = arg<#= j #><#= valuePrefix #>;
                <# } #>

            }
            if (i == source.<#= TT.LengthOrCount(sourceType) #>)
                return (<#= type #>) <#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3));
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 1)
                return (<#= type #>) <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= TT.Envelope(mapFunc, "source[i]") #>);
            if (i == source.<#= TT.LengthOrCount(sourceType) #> - 2)
                return (<#= type #>) <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(<#= TT.Envelope(mapFunc, "source[i]") #>, <#= TT.Envelope(mapFunc, "source[i + 1]") #>));
            return (<#= type #>) <#= max #>(<#= max #>(<#= max #>(max0, max1), <#= max #>(max2, max3)), <#= max #>(<#= TT.Envelope(mapFunc, "source[i]") #>, <#= max #>(<#= TT.Envelope(mapFunc, "source[i + 1]") #>, <#= TT.Envelope(mapFunc, "source[i + 2]") #>)));
        } 
        <# } 
        }#>
        
    #endregion
<# } #>    
    }
}
