<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using ZLinq.Extension;

// ReSharper disable CheckNamespace
// ReSharper disable RedundantCast
namespace ZLinq
{
    public static partial class ZEnumerable
    {		
	<#foreach (var type in TT.NumberTypes) { #>

		#region <#= type #>	 		
		<# foreach (string sourceType in TT.StandardLists) 
		{ #>	
		/// <summary>
        /// Perform checked summing of source collection
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Sum of all elements</returns>
        [Pure]
        public static double Average(this <#= sourceType.Replace("T", type) #> source)
        {
            <#= TT.IsNotNull("source") #>
			try
		    {
				double sum = (double) source.Sum();
				return (sum/source.<#= TT.LengthOrCount(sourceType) #>);
            }
		    catch (OverflowException)
		    {
				double mult = (double) 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
		        return source.Sum(x => (double) x*mult);
		    }
        }

		/// <summary>
        /// Perform checked summing of source collection mapping
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <param name="mapFunc">Function that maps each element of source to perform summing</param>
        /// <returns>Sum of all elements</returns>
		[Pure]
        public static double Average<T>(this <#= sourceType #> source, Func<T, <#= type #>> mapFunc)
        {
            <#= TT.IsNotNull("source") #>
			try
		    {
				double sum = (double) source.Sum(mapFunc);
				return (sum/source.<#= TT.LengthOrCount(sourceType) #>);
            }
		    catch (OverflowException)
		    {
				double mult = (double) 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
		        return source.Sum(arg => (double) mapFunc(arg)*mult);
		    }
        }

		<# } #>

		#endregion
	<# } #>	
    }
}
