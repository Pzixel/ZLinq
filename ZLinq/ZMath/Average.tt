<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using ZLinq.Common;

// ReSharper disable CheckNamespace
// ReSharper disable RedundantCast
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
    <#foreach (var type in TT.WithNullables(TT.ULongableTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        { 
            string collectionType = sourceType.To(type); #>    
        /// <summary>
        /// Calculates average of collection <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Average of all elements</returns>
        [Pure]
        public static double Average([NotNull] this <#= sourceType.Replace("T", type) #> source)
        {   
            <#= TT.IsNotNull("source") #>
            source.IsNotEmpty<<#= collectionType #>, <#= type #>>();
            try
            {
                double sum = source.Sum();
                return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            catch (OverflowException)
            {
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(x => <#= TT.UnwrapNullable(type, "x") #>*mult);
            }
            catch (AggregateException ex)
            {                
                if (!(ex.InnerException is OverflowException))
                    throw;                
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(x => <#= TT.UnwrapNullable(type, "x") #>*mult);
            }
        }

        /// <summary>
        /// Calculates average of collection mapping <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <param name="mapFunc">Function that maps each element of source to perform summing</param>
        /// <returns>Average of all elements</returns>
        [Pure]
        public static double Average<T>([NotNull] this <#= sourceType #> source, [NotNull] Func<T, <#= type #>> mapFunc)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("mapFunc") #>
            source.IsNotEmpty<<#= sourceType #>, T>();
            try
            {
                double sum = source.Sum(mapFunc);
                return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            catch (OverflowException)
            {
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(arg => <#= TT.UnwrapNullable(type, "mapFunc(arg)") #>*mult);
            }
            catch (AggregateException ex)
            {
                if (!(ex.InnerException is OverflowException))
                    throw;
                double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
                return source.Sum(arg => <#= TT.UnwrapNullable(type, "mapFunc(arg)") #>*mult);
            }
        }

        <# } #>

        #endregion
    <# } #>    

       <#foreach (var type in TT.WithNullables(TT.FloatTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        { 
            string collectionType = sourceType.To(type); #>  
        /// <summary>
        /// Calculates average of collection <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Average of all elements</returns>
        [Pure]
        public static double Average([NotNull] this <#= sourceType.Replace("T", type) #> source)
        {
            <#= TT.IsNotNull("source") #>
            source.IsNotEmpty<<#= collectionType #>, <#= type #>>();
            double sum = (double) source.Sum();
            if (!double.IsInfinity(sum))
            {
               return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
            return source.Sum(x => (double) <#= TT.UnwrapNullable(type, "x") #>*mult);
        }

        /// <summary>
        /// Calculates average of collection mapping <#= !type.EndsWith("?") ? "" : ". Nulls are treated as 0"#>
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <param name="mapFunc">Function that maps each element of source to perform summing</param>
        /// <returns>Average of all elements</returns>
        [Pure]
        public static double Average<T>([NotNull] this <#= sourceType #> source, [NotNull] Func<T, <#= type #>> mapFunc)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("mapFunc") #>
            source.IsNotEmpty<<#= sourceType #>, T>();
            double sum = (double) source.Sum(mapFunc);
            if (!double.IsInfinity(sum))
            {
               return sum/source.<#= TT.LengthOrCount(sourceType) #>;
            }
            double mult = 1.0/source.<#= TT.LengthOrCount(sourceType) #>;
            return source.Sum(arg => (double) <#= TT.UnwrapNullable(type, "mapFunc(arg)") #>*mult);
        }

        <# } #>

        #endregion
    <# } #>    
    }
}
