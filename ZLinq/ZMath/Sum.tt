<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Annotations;
using ZLinq.Common;


// ReSharper disable CheckNamespace 
namespace ZLinq
{
    public static partial class ZEnumerable
    {        
    <#foreach (var type in TT.WithNullables(TT.NumberTypes)) { 
        string resType = type.TrimEnd('?');
        string suffix = type != resType ? ".GetValueOrDefault()" : ""; #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) 
        { #>    
        /// <summary>
        /// Perform checked summing of source collection
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <returns>Sum of all elements</returns>
        [Pure]
        public static <#= resType #> Sum([NotNull] this <#= sourceType.Replace("T", type) #> source)
        {
            <#= TT.IsNotNull("source") #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
                return Sum(source, 0, source.<#= TT.LengthOrCount(sourceType) #>);
            <#= resType #> result = 0;
            object syncRoot = new object();     
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                        range => {
                        var x = Sum(source, range.Item1, range.Item2);
                        checked
                        {   
                            lock (syncRoot)
                                result += x;  
                        }     
                    });              
            return result;
        }

        [Pure]
        private static <#= resType #> Sum([NotNull] this <#= sourceType.Replace("T", type) #> source, int startIndex, int endIndex)
        {
            <#= resType #> sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;
            checked
            {
                int i;
                int loopEnd = endIndex - Constants.Step + 1;
                for (i = startIndex; i < loopEnd; i += Constants.Step)
                {
                    sum1 += source[i]<#= suffix #>;
                    sum2 += source[i + 1]<#= suffix #>;
                    sum3 += source[i + 2]<#= suffix #>;
                    sum4 += source[i + 3]<#= suffix #>;
                }

                if (i == endIndex)
                    return (<#= resType #>) (sum1 + sum2 + sum3 + sum4);
                if (i == endIndex - 1)
                    return (<#= resType #>) (sum1 + sum2 + sum3 + sum4 + source[i]<#= suffix #>);
                if (i == endIndex - 2)
                    return (<#= resType #>) (sum1 + sum2 + sum3 + sum4 + source[i]<#= suffix #> + source[i + 1]<#= suffix #>);
                return (<#= resType #>) (sum1 + sum2 + sum3 + sum4 + source[i]<#= suffix #> + source[i + 1]<#= suffix #> + source[i + 2]<#= suffix #>);
            }
        }

        /// <summary>
        /// Perform checked summing of source collection mapping
        /// </summary>
        /// <param name="source">Source collection</param>
        /// <param name="mapFunc">Function that maps each element of source to perform summing</param>
        /// <returns>Sum of all elements</returns>
        [Pure]
        public static <#= resType #> Sum<T>([NotNull] this <#= sourceType #> source, [NotNull] Func<T, <#= type #>> mapFunc)
        {
            <#= TT.IsNotNull("source") #>
            <#= TT.IsNotNull("mapFunc") #>
            if (source.<#= TT.LengthOrCount(sourceType) #> < Constants.SingleThreadExecutionThreshold)
                return Sum(source, mapFunc, 0, source.<#= TT.LengthOrCount(sourceType) #>);
            <#= resType #> result = 0;
            object syncRoot = new object();  
            Parallel.ForEach(Partitioner.Create(0, source.<#= TT.LengthOrCount(sourceType) #>),
                        range => {
                        var x = Sum(source, mapFunc, range.Item1, range.Item2);
                        checked
                        {   
                            lock (syncRoot)
                                result += x;  
                        }     
                    });   

            return result;
        }

        [Pure]
        private static <#= resType #> Sum<T>([NotNull] this <#= sourceType #> source, Func<T, <#= type #>> mapFunc, int startIndex, int endIndex)
        {
            <#= resType #> sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;
            checked
            {
                int i;
                int loopEnd = endIndex - Constants.Step + 1;
                for (i = startIndex; i < loopEnd; i += Constants.Step)
                {
                    sum1 += mapFunc(source[i])<#= suffix #>;
                    sum2 += mapFunc(source[i + 1])<#= suffix #>;
                    sum3 += mapFunc(source[i + 2])<#= suffix #>;
                    sum4 += mapFunc(source[i + 3])<#= suffix #>;
                }
                if (i == endIndex)
                    return  (<#= resType #>) (sum1 + sum2 + sum3 + sum4);
                if (i == endIndex - 1)
                    return  (<#= resType #>)(sum1 + sum2 + sum3 + sum4 + mapFunc(source[i])<#= suffix #>);
                if (i == endIndex - 2)
                    return  (<#= resType #>)(sum1 + sum2 + sum3 + sum4 + mapFunc(source[i])<#= suffix #> + mapFunc(source[i + 1])<#= suffix #>);
                return  (<#= resType #>) (sum1 + sum2 + sum3 + sum4 + mapFunc(source[i])<#= suffix #> + mapFunc(source[i + 1])<#= suffix #> + mapFunc(source[i + 2])<#= suffix #>);
            }
        }
        <# } #>

        #endregion
    <# } #>    
    
    }
}
