<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.Core.Fold
{
    [TestClass]
    public class HasSeveralItems
    {    
        <# foreach (var sourceType in TT.StandardEnumerables) { 
        string name = TT.GetCollectionName(sourceType);#>        
        [TestMethod]
        public void HasSeveralItems<#= name #>()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));

            Assert.IsTrue(x.HasSeveralItems(10));
			Assert.IsTrue(x.HasSeveralItems(1000));
			Assert.IsFalse(x.HasSeveralItems(1025));			
			Assert.IsTrue(y.HasSeveralItems(10));
			Assert.IsTrue(y.HasSeveralItems(1000));
			Assert.IsFalse(y.HasSeveralItems(1025));
			Assert.IsTrue(z.HasSeveralItems(10));
			Assert.IsTrue(z.HasSeveralItems(1000));
			Assert.IsFalse(z.HasSeveralItems(1025));
			Assert.IsTrue(dict.HasSeveralItems(10));
			Assert.IsTrue(dict.HasSeveralItems(1000));
			Assert.IsFalse(dict.HasSeveralItems(1025));
        }

        [TestMethod]
        public void HasSeveralItems<#= name #>Predicate()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));
			Assert.IsTrue(x.HasSeveralItems(10, val => val%3 == 0));
			Assert.IsTrue(x.HasSeveralItems(300, val => val%3 == 0));
			Assert.IsFalse(x.HasSeveralItems(1025, val => val%3 == 0));			
			Assert.IsTrue(y.HasSeveralItems(10, val => val.Item1%3 == 0));
			Assert.IsTrue(y.HasSeveralItems(300, val => val.Item1%3 == 0));
			Assert.IsFalse(y.HasSeveralItems(1025, val => val.Item1%3 == 0));
			Assert.IsTrue(z.HasSeveralItems(10, val => val.A%3 == 0));
			Assert.IsTrue(z.HasSeveralItems(300, val => val.A%3 == 0));
			Assert.IsFalse(z.HasSeveralItems(1025, val => val.A%3 == 0));
			Assert.IsTrue(dict.HasSeveralItems(10, val => val.Key%3 == 0));
			Assert.IsTrue(dict.HasSeveralItems(300, val => val.Key%3 == 0));
			Assert.IsFalse(dict.HasSeveralItems(1025, val => val.Key%3 == 0));
        }

		[TestMethod]
        public void HasSeveralItems<#= name #>InvalidInput()
        {
			<#= sourceType.To("int") #> x = null;
			try
			{
				x.HasSeveralItems(0);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}
        }

		
		[TestMethod]
        public void HasSeveralItems<#= name #>InvalidInputPredicate()
        {
			<#= sourceType.To("int") #> x = null;
			try
			{
				x.HasSeveralItems(0);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}

			var z = Enumerable.Range(1, 1).Select(a => new Tuple<int, int>(a, a)).To<#= name #>();

			try
			{
				z.HasSeveralItems(0, null);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}
        }

        <# } #>    


    }
}
