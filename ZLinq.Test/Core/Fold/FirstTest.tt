<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.Core.Fold
{
    [TestClass]
    public class First
    {	
		<# foreach (var sourceType in TT.StandardCollections) { 
		string name = TT.GetCollectionName(sourceType);#>		
		[TestMethod]
        public void First<#= name #>()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();

            Assert.IsTrue(ZEnumerable.First(x) == Enumerable.First(x));
			Assert.IsTrue(ZEnumerable.First(y) == Enumerable.First(y));
			Assert.IsTrue(ZEnumerable.First(z) == Enumerable.First(z));
        }

		[TestMethod]
        public void First<#= TT.GetCollectionName(sourceType) #>OrDefault()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = new int[0].To<#= name #>();

            Assert.IsTrue(ZEnumerable.FirstOrDefault(x) == Enumerable.FirstOrDefault(x));
            Assert.IsTrue(ZEnumerable.FirstOrDefault(y) == Enumerable.FirstOrDefault(y));
            Assert.IsTrue(ZEnumerable.FirstOrDefault(z) == Enumerable.FirstOrDefault(z));
        }

		[TestMethod]
        public void First<#= name #>Predicate()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();

            Assert.IsTrue(ZEnumerable.First(x, val => val%3 == 0) == Enumerable.First(x, val => val%3 == 0));
			Assert.IsTrue(ZEnumerable.First(y, val => val.Item1%3 == 0) == Enumerable.First(y, val => val.Item1%3 == 0));
			Assert.IsTrue(ZEnumerable.First(z, val => val.A%3 == 0) == Enumerable.First(z, val => val.A%3 == 0));
        }

		[TestMethod]
        public void First<#= TT.GetCollectionName(sourceType) #>OrDefaultPredicate()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = new int[0].To<#= name #>();

            Assert.IsTrue(ZEnumerable.FirstOrDefault(x, val => val%3 == 0) == Enumerable.FirstOrDefault(x, val => val%3 == 0));
            Assert.IsTrue(ZEnumerable.FirstOrDefault(y, val => val.Item1%3 == 0) == Enumerable.FirstOrDefault(y, val => val.Item1%3 == 0));
            Assert.IsTrue(ZEnumerable.FirstOrDefault(z, val => val%3 == 0) == Enumerable.FirstOrDefault(z, val => val%3 == 0));
        }

		<# } #>	


    }
}
