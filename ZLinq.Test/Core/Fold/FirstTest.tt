<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.Core.Fold
{
    [TestClass]
    public class First
    {    
        <# foreach (var sourceType in TT.StandardCollections) { 
        string name = TT.GetCollectionName(sourceType);#>        
        [TestMethod]
        public void First<#= name #>()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));

            Assert.AreEqual(ZEnumerable.First(x), Enumerable.First(x));
            Assert.AreEqual(ZEnumerable.First(y), Enumerable.First(y));
            Assert.AreEqual(ZEnumerable.First(z), Enumerable.First(z));
            Assert.AreEqual(ZEnumerable.First(dict), Enumerable.First(dict));
        }

        [TestMethod]
        public void First<#= TT.GetCollectionName(sourceType) #>OrDefault()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = new int[0].To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));

            Assert.AreEqual(ZEnumerable.FirstOrDefault(x), Enumerable.FirstOrDefault(x));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(y), Enumerable.FirstOrDefault(y));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(z), Enumerable.FirstOrDefault(z));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(dict), Enumerable.FirstOrDefault(dict));
        }

        [TestMethod]
        public void First<#= name #>Predicate()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = Enumerable.Range(1, 1024).Select(a => new { A = a}).To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));

            Assert.AreEqual(ZEnumerable.First(x, val => val%3 == 0), Enumerable.First(x, val => val%3 == 0));
            Assert.AreEqual(ZEnumerable.First(y, val => val.Item1%3 == 0), Enumerable.First(y, val => val.Item1%3 == 0));
            Assert.AreEqual(ZEnumerable.First(z, val => val.A%3 == 0), Enumerable.First(z, val => val.A%3 == 0));
            Assert.AreEqual(ZEnumerable.First(dict, val => val.Key%3 == 0), Enumerable.First(dict, val => val.Key%3 == 0));
        }

        [TestMethod]
        public void First<#= TT.GetCollectionName(sourceType) #>OrDefaultPredicate()
        {
            var x = Enumerable.Range(1, 1024).To<#= name #>();
            var y = Enumerable.Range(1, 1024).Select(a => new Tuple<int, int>(a,a)).To<#= name #>();
            var z = new Tuple<int, int>[0].To<#= name #>();
            var dict = new SortedDictionary<int, int>(x.ToDictionary(a => a, a => a));

            Assert.AreEqual(ZEnumerable.FirstOrDefault(x, val => val%3 == 0), Enumerable.FirstOrDefault(x, val => val%3 == 0));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(y, val => val.Item1%3 == 0), Enumerable.FirstOrDefault(y, val => val.Item1%3 == 0));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(z, val => val.Item1%3 == 0), Enumerable.FirstOrDefault(z, val => val.Item1%3 == 0));
            Assert.AreEqual(ZEnumerable.FirstOrDefault(dict, val => val.Key%3 == 0), Enumerable.FirstOrDefault(dict, val => val.Key%3 == 0));
        }

		[TestMethod]
        public void First<#= name #>InvalidInput()
        {
			<#= sourceType.To("int") #> x = null;
			try
			{
				ZEnumerable.First(x);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}

            var y = new int[0].To<#= name #>();
			try
			{
				ZEnumerable.First(y);
				Assert.Fail();
			}
			catch (InvalidOperationException)
			{
			}

			var z = Enumerable.Range(1, 1).Select(a => new Tuple<int, int>(a, a)).To<#= name #>();
			try
			{
				ZEnumerable.First(z, null);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}

			try
			{
				ZEnumerable.First(z, _ => false);
				Assert.Fail();
			}
			catch (InvalidOperationException)
			{
			}
        }

		
		[TestMethod]
        public void FirstOrDefault<#= name #>InvalidInput()
        {
			<#= sourceType.To("int") #> x = null;
			try
			{
				ZEnumerable.FirstOrDefault(x);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}

			var z = Enumerable.Range(1, 1).Select(a => new Tuple<int, int>(a, a)).To<#= name #>();

			try
			{
				ZEnumerable.FirstOrDefault(z, null);
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
			}
        }

        <# } #>    


    }
}
