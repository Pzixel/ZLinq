<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;


// ReSharper disable RedundantCast
namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Average
    {            
        private const double Tolerance = 0.0000001;
                    
    <#foreach (var type in TT.WithNullables(TT.NumberTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) {
            string name = TT.GetCollectionName(sourceType);
            string typeName = TT.GetNullableName(type);
            bool isInteger = !TT.IsFloat(type);
            string trimmedType = type.TrimEnd('?');
            string expectedVal = trimmedType + ".MaxValue/10*9";
         #>    

         
        [TestMethod]
        public void TestAverage<#= typeName #><#= name #>NullOrEmpty()
        {        
            <#= sourceType.Replace("T", type) #> nullSource = null;

            try
            {
                ZEnumerable.Average(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            <#= sourceType.Replace("T", type) #> emptySource = new <#= type #>[0].To<#= name #>();
            try
            {
                ZEnumerable.Average(emptySource);                
                Assert.Fail();
            }
            catch (InvalidOperationException)
            {
                
            }
        }

        [TestMethod]
        public void TestAverage<#= typeName #><#= name #>MapNullOrEmpty()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).To<#= name #>();
            Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> nullMap = null;
            try
            {
                ZEnumerable.Average(source, nullMap);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            var emptySource = source.Take(0).To<#= name #>();
            try
            {
                ZEnumerable.Average(emptySource, nullMap);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
            try
            {
                ZEnumerable.Average(emptySource, x => x.Key);                
                Assert.Fail();
            }
            catch (InvalidOperationException)
            {
                
            }
        }
         
        <# foreach(int i in TT.TestSizes) { #>
            <# foreach(var val in new string[] {expectedVal, "1"}) {
            string suffix = val == "1" ? "Min" : ""; #>
        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #><#= suffix #>()
        {            
            const <#= trimmedType #> expected = <#= val #>;
            var source = Enumerable.Repeat((<#= type #>) expected, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source);

            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }

        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #>Map<#= suffix #>()
        {
            const <#= trimmedType #> expected = <#= val #>;
            var source = Enumerable.Repeat(new { X = expected}, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source, arg => (<#= type #>) arg.X);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }
        <# } #>          
        <# } #>

        <# if (isInteger) { #>      
        <# var dict = new Dictionary<string, string> { {"(" + type + ") expected",""}, {string.Format("new {{ X = ({0}) expected}}", type), ", arg => arg.X"}};  #>
        <# foreach (var pair in dict)  { #>
        <# string map = pair.Value == "" ? "" : "Map"; #>

        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= map #>NoOverflow()
        {
            const <#= trimmedType #> expected = <#= trimmedType #>.MaxValue;
            var source = Enumerable.Repeat(<#= pair.Key #>, 2).To<#= name #>();
            double result = ZEnumerable.Average(source<#= pair.Value #>);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }

        <# } #>
        <# } #>
        <# } #>
        
        #endregion
    <# } #>  
    }
}