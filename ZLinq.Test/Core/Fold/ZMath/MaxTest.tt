<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Max
    {            
     <# foreach (var type in TT.WithNullables(TT.NumberTypes)) { 
        string typeName = TT.GetNullableName(type); #>  

        #region <#= type #> 
        <#  foreach (string sourceType in TT.StandardLists) {  
            string name = TT.GetCollectionName(sourceType);#>     
            
        [TestMethod]
        public void TestMax<#= typeName #><#= name #>NullOrEmpty()
        {        
            <#= sourceType.Replace("T", type) #> nullSource = null;

            try
            {
                ZEnumerable.Max(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            <#= sourceType.Replace("T", type) #> emptySource = new <#= type #>[0].<#= sourceType.ToCollection() #>
            try
            {
                ZEnumerable.Max(emptySource);                
                Assert.Fail();
            }
            catch (InvalidOperationException)
            {
                
            }
        }

        [TestMethod]
        public void TestMax<#= typeName #><#= name #>MapNullOrEmpty()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).<#= sourceType.ToCollection() #>
            Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> nullMap = null;
            try
            {
                ZEnumerable.Max(source, nullMap);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            var emptySource = source.Take(0).<#= sourceType.ToCollection() #>
            try
            {
                ZEnumerable.Max(emptySource, nullMap);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
            try
            {
                ZEnumerable.Max(emptySource, x => x.Key);                
                Assert.Fail();
            }
            catch (InvalidOperationException)
            {
                
            }
        }

        <# foreach(int i in TT.TestSizes) { #>             
                
        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>()
        {
            var source = ZEnumerable.Repeat(new Random(), r => (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>), <#= i #>).<#= sourceType.ToCollection() #>
            <#= type #> maxActual = ZEnumerable.Max(source);
            <#= type #> maxExpected = Maxer.GetMax(source);
            Assert.AreEqual(maxExpected, maxActual);
        }
           
        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>Map()
        {
            var source = ZEnumerable.Repeat(new Random(), r => new { X =  (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>) } , <#= i #>).<#= sourceType.ToCollection() #>
            <#= type #> maxActual = ZEnumerable.Max(source, arg => arg.X);
            <#= type #> maxExpected =  Maxer.GetMax(source.Select(arg => arg.X)); 
            Assert.AreEqual(maxExpected, maxActual);
        }
    
        <# if (TT.IsNullable(type)) { #>

        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>ThreatNulls()
        {
            var source = ZEnumerable.Repeat(new Random(), r => (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>), <#= i #>).Select(x=>x%2==0 ? x : null).<#= sourceType.ToCollection() #>
            <#= type #> maxActual = ZEnumerable.Max(source);
            <#= type #> maxExpected = Maxer.GetMax(source);
            Assert.AreEqual(maxExpected, maxActual);
        }
           
        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat(new Random(), r => (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>), <#= i #>).Select(x=>x%2==0 ? x : null).<#= sourceType.ToCollection() #>
            var source = baseCol.Select(x => new { X =  x } ).<#= sourceType.ToCollection() #>
            <#= type #> maxActual = ZEnumerable.Max(source, arg => arg.X);
            <#= type #> maxExpected = Maxer.GetMax(source.Select(arg => arg.X)); 
            Assert.AreEqual(maxExpected, maxActual);
        }

            <# } #>
        
            <# } #>
        <# } #>    
               
        #endregion

    <# }#>

    }
}