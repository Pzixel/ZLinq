<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" 
#>
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ZLinq.Test.Core.Common
{
    [TestClass]
    public class Flatten
    {   	
		<# for(int i = 2; i <= 10; i++) { 	#> 

        [TestMethod]
        public void TestFlatten<#= i #>Dim()
        {
            var array = new int[<#= string.Join(",", Enumerable.Range(0, i).Select(x=>x%3 + 1)) #>];
			<# char[] letters = Enumerable.Range(0, i).Select(x =>(char)('a' + x)).ToArray();
			for(int j = 0; j < letters.Length; j++) { 	
			
			#>for (int <#= letters[j] #> = 0; <#= letters[j] #> < array.GetLength(<#= j #>); <#= letters[j] #>++) 
			<# } #>

				unchecked
                {
					array[<#= string.Join(",", letters) #>] = <#= string.Join("+", letters) #>;
                }

            var arr1 = array.Flatten().ToArray();
            var arr2 = array.Cast<int>().ToArray();

            Assert.AreEqual(arr1.Length, arr2.Length);
            Assert.IsTrue(arr1.SequenceEqual(arr2));
        }
		<# } #>

		<# for(int i = 2; i <= 10; i++) { 	#> 

        [TestMethod]
        public void TestFlattenToArray<#= i #>Dim()
        {
            var array = new int[<#= string.Join(",", Enumerable.Range(0, i).Select(x=>x%3 + 1)) #>];
			<# char[] letters = Enumerable.Range(0, i).Select(x =>(char)('a' + x)).ToArray();
			for(int j = 0; j < letters.Length; j++) { 	
			
			#>for (int <#= letters[j] #> = 0; <#= letters[j] #> < array.GetLength(<#= j #>); <#= letters[j] #>++) 
			<# } #>

				unchecked
                {
					array[<#= string.Join(",", letters) #>] = <#= string.Join("+", letters) #>;
                }

            var arr1 = array.FlattenToArray();
            var arr2 = array.Cast<int>().ToArray();

            Assert.AreEqual(arr1.Length, arr2.Length);
            Assert.IsTrue(arr1.SequenceEqual(arr2));
        }
		<# } #>	        

    }
}
