<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.Core.Common
{
    [TestClass]
    public class Select
	{

        <# foreach (var sourceTypeInt in TT.ToInt(TT.StandardEnumerables)) { 
			string[] tos = sourceTypeInt.IsIndexable() ? new[] {"ToArray"} : sourceTypeInt.StartsWith("ICol") ? new[] {"ToArray", "ToList"} : new[] {"ToList"};#>

		<# foreach (var to in tos) { #>
		<# foreach(int i in TT.TestSizes) { #> 

        [TestMethod]
        public void TestSelect<#= to #>From<#= sourceTypeInt.GetCollectionName() #><#= i #>()
        {
            var source = Enumerable.Range(1, <#= i #>).<#= sourceTypeInt.ToCollection() #>

            var xArr = source.Select<#= to #>(x => x * x).ToArray();
            var linqArr = source.Select(x => x * x).ToArray();

            Assert.IsTrue(xArr.Length == linqArr.Length);
            Assert.IsTrue(xArr.SequenceEqual(linqArr));
        }
		<# } #>
		
        [TestMethod]
        public void TestSelect<#= to #>From<#= sourceTypeInt.GetCollectionName() #>InvalidArguments()
        {
            <#= sourceTypeInt #> nullSource = null;

            try
            {
                nullSource.Select<#= to #>(x => x * x);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            var source = Enumerable.Range(1, 100).<#= sourceTypeInt.ToCollection() #>
            try
            {
                source.Select<#= to #><int, int>(null);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }
		<# } #>
        <# } #> 

    }
}
