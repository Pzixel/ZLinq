<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>
<# 

string[] sourceTypeCollections = new[] {"List<int>", "IList<int>", "ICollection<int>", "IEnumerable<int>"};

#>
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ZLinq.Test.Core
{    
	[TestClass]
    public class Split
    {
		<# foreach(string suffix in new[] {string.Empty, "ToArray"}) { #> 

        [TestMethod]
        public void TestSplit<#= suffix #>()
        {
            int[] source = {1, 2, 3, 4, 5};
            var split = source.Split<#= suffix #>(2).ToArray();

            Assert.AreEqual(3, split.Length, "Array length mismatch");
            Assert.AreEqual(source[0], split[0][0]);
            Assert.AreEqual(source[1], split[0][1]);
            Assert.AreEqual(source[2], split[1][0]);
            Assert.AreEqual(source[3], split[1][1]);
            Assert.AreEqual(source[4], split[2][0]);
        }
		
		<# foreach (var sourceType in sourceTypeCollections) { #>

        [TestMethod]
        public void TestSplit<#= sourceType.Remove(sourceType.IndexOf("<int>")) #><#= suffix #>()
        {
            var source = (<#= sourceType #>) new List<int> { 1, 2, 3, 4, 5 };
            var split = source.Split<#= suffix #>(2).ToArray();

			var sourceArr = source.ToArray();
            Assert.AreEqual(3, split.Length, "Array length mismatch");
            Assert.AreEqual(sourceArr[0], split[0][0]);
            Assert.AreEqual(sourceArr[1], split[0][1]);
            Assert.AreEqual(sourceArr[2], split[1][0]);
            Assert.AreEqual(sourceArr[3], split[1][1]);
            Assert.AreEqual(sourceArr[4], split[2][0]);
        }

		[TestMethod]
        public void TestSplit<#= sourceType.Remove(sourceType.IndexOf("<int>")) #><#= suffix #>InvalidArguments()
        {
            <#= sourceType #> nullSource = null;

            try
			{
				nullSource.Split<#= suffix #>(2).ToArray();			
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
				
			}

			var source = (<#= sourceType #>) new List<int> { 1, 2, 3, 4, 5 };
			try
			{
				source.Split<#= suffix #>(0).ToArray();				
				Assert.Fail();
			}
			catch (ArgumentException)
			{
				
			}
        }	
		<# } 
		}#>

    }
}