<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Max
    {            
    <# foreach(int i in new[] {100, 2049, 2051 }) { #>

                
    <#foreach (var type in TT.NumberTypes.Concat(TT.GetNullables(TT.NumberTypes))) { 
        string typeName = TT.GetNullableName(type); #>
        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) { 
        string name = TT.GetCollectionName(sourceType);#>    
        <# if (TT.CanBeRepresented(type, i)) { #>

        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>()
        {
            var source = ZEnumerable.Repeat(new Random(), r => (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>), <#= i #>).To<#= name #>();
            <#= type #> maxActual = ZEnumerable.Max(source);
            <#= type #> maxExpected = Enumerable.Max(source);          
            Assert.AreEqual(maxExpected, maxActual);
        }
           
        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>Map()
        {
            var source = ZEnumerable.Repeat(new Random(), r => new { X =  (<#= type #>) r.Next(<#= TT.GetMaxValue(type) #>) } , <#= i #>).To<#= name #>();
            <#= type #> maxActual = ZEnumerable.Max(source, arg => arg.X);
            <#= type #> maxExpected = Enumerable.Max(source, arg => arg.X);        
            Assert.AreEqual(maxExpected, maxActual);
        }

        <# } #>
    
        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>Null()
        {        
            <#= sourceType.Replace("T", type) #> nullSource = null;

            try
            {
                ZEnumerable.Max(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestMax<#= typeName #><#= name #><#= i #>MapNull()
        {
            var source = Enumerable.Range(1, <#= i #>).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).To<#= name #>();
            Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> map = null;
            try
            {
                ZEnumerable.Max(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }
        <# } #>
        
        #endregion
    <# } #>    


    <# }#>

    }
}