<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Max
    {		    
			
	<#foreach (var type in TT.NumberTypes) { #>

		#region <#= type #>	 		
		<# foreach (string sourceType in TT.StandardLists) { #>	
        [TestMethod]
        public void TestMax<#= type #><#= TT.GetCollectionName(sourceType) #>()
        {
            var source = Enumerable.Range(1, 100).Select(x => (<#= type #>)x).<#= TT.ToArrayOrToList(sourceType) #>;

			<#= type #> maxActual = ZEnumerable.Max(source);
            const <#= type #> maxExpected = 100;

            Assert.AreEqual(maxExpected, maxActual);
        }

		[TestMethod]
        public void TestMax<#= type #><#= TT.GetCollectionName(sourceType) #>Map()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new { X = (<#= type #>)arg }).<#= TT.ToArrayOrToList(sourceType) #>;

			<#= type #> maxActual = ZEnumerable.Max(source, arg => arg.X);
            const <#= type #> maxExpected = 100;

            Assert.AreEqual(maxExpected, maxActual);
        }
	
		[TestMethod]
        public void TestMax<#= type #><#= TT.GetCollectionName(sourceType) #>Null()
        {		
			<#= sourceType.Replace("T", type) #> nullSource = null;

            try
			{
				ZEnumerable.Max(nullSource);				
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
				
			}
        }

		[TestMethod]
        public void TestMax<#= type #><#= TT.GetCollectionName(sourceType) #>MapNull()
        {
			var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).<#= TT.ToArrayOrToList(sourceType) #>;
			Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> map = null;
			try
			{
				ZEnumerable.Max(source, map);				
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
				
			}
        }
		<# } #>
		
		#endregion
	<# } #>	

	#region Nullables

		<#foreach (var type in TT.GetNullables(TT.NumberTypes)) { 
		string testName = type.Replace("?", "Nullable");#>

		#region <#= type #>	 		
		<# foreach (string sourceType in TT.StandardLists) { #>	
        [TestMethod]
        public void TestMax<#= testName #>Nullable<#= TT.GetCollectionName(sourceType) #>()
        {
            var source = Enumerable.Range(1, 100).Select(x => (<#= type #>)x).<#= TT.ToArrayOrToList(sourceType) #>;

			<#= type #> maxActual = ZEnumerable.Max(source);
            <#= type #> maxExpected = 100;

            Assert.AreEqual(maxExpected, maxActual);
        }

		[TestMethod]
        public void TestMax<#= testName #>Nullable<#= TT.GetCollectionName(sourceType) #>Map()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new { X = (<#= type #>)arg }).<#= TT.ToArrayOrToList(sourceType) #>;

			<#= type #> maxActual = ZEnumerable.Max(source, arg => arg.X);
            <#= type #> maxExpected = 100;

            Assert.AreEqual(maxExpected, maxActual);
        }
	
		[TestMethod]
        public void TestMax<#= testName #>Nullable<#= TT.GetCollectionName(sourceType) #>Null()
        {		
			<#= sourceType.Replace("T", type) #> nullSource = null;

            try
			{
				ZEnumerable.Max(nullSource);				
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
				
			}

			<#= sourceType.Replace("T", type) #> sourceOfNulls = new <#= type #>[] {null}.<#= TT.ToArrayOrToList(sourceType) #>;
			var max = ZEnumerable.Max(sourceOfNulls);
			Assert.AreEqual(default(<#= type #>), max);
        }

		[TestMethod]
        public void TestMax<#= testName #>Nullable<#= TT.GetCollectionName(sourceType) #>MapNull()
        {
			var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).<#= TT.ToArrayOrToList(sourceType) #>;
			Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> map = null;
			try
			{
				ZEnumerable.Max(source, map);				
				Assert.Fail();
			}
			catch (ArgumentNullException)
			{
				
			}

			object[] sourceForNulls = { new Stack<int>() };
			var sourceOfNulls = sourceForNulls.Select(x => (<#= type #>) null).<#= TT.ToArrayOrToList(sourceType) #>;
			var max = ZEnumerable.Max(sourceOfNulls);
			Assert.AreEqual(default(<#= type #>), max);
        }
		<# } #>
		
		#endregion
	<# } #>	

	#endregion
    }
}