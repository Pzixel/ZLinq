
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Sum
    {            
    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray0()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 0).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 0).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray0Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList0()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 0).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 0).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList0Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList0()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 0).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 0).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList0Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray0()
        {
            var source = ZEnumerable.Repeat((byte) 1, 0).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 0).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray0Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList0()
        {
            var source = ZEnumerable.Repeat((byte) 1, 0).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 0).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList0Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList0()
        {
            var source = ZEnumerable.Repeat((byte) 1, 0).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 0).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList0Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray0()
        {
            var source = ZEnumerable.Repeat((short) 1, 0).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 0).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray0Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList0()
        {
            var source = ZEnumerable.Repeat((short) 1, 0).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 0).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList0Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList0()
        {
            var source = ZEnumerable.Repeat((short) 1, 0).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 0).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList0Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray0()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 0).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 0).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray0Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList0()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 0).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 0).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList0Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList0()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 0).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 0).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList0Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray0()
        {
            var source = ZEnumerable.Repeat((int) 1, 0).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 0).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray0Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList0()
        {
            var source = ZEnumerable.Repeat((int) 1, 0).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 0).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList0Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList0()
        {
            var source = ZEnumerable.Repeat((int) 1, 0).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 0).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList0Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray0()
        {
            var source = ZEnumerable.Repeat((uint) 1, 0).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 0).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray0Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList0()
        {
            var source = ZEnumerable.Repeat((uint) 1, 0).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 0).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList0Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList0()
        {
            var source = ZEnumerable.Repeat((uint) 1, 0).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 0).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList0Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray0()
        {
            var source = ZEnumerable.Repeat((long) 1, 0).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 0).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray0Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList0()
        {
            var source = ZEnumerable.Repeat((long) 1, 0).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 0).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList0Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList0()
        {
            var source = ZEnumerable.Repeat((long) 1, 0).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 0).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList0Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray0()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 0).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 0).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray0Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList0()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 0).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 0).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList0Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList0()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 0).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 0).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList0Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray0()
        {
            var source = ZEnumerable.Repeat((float) 1, 0).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 0).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray0Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList0()
        {
            var source = ZEnumerable.Repeat((float) 1, 0).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 0).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList0Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList0()
        {
            var source = ZEnumerable.Repeat((float) 1, 0).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 0).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList0Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray0()
        {
            var source = ZEnumerable.Repeat((double) 1, 0).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 0).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray0Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList0()
        {
            var source = ZEnumerable.Repeat((double) 1, 0).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 0).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList0Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList0()
        {
            var source = ZEnumerable.Repeat((double) 1, 0).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 0).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList0Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray0()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 0).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 0).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray0Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList0()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 0).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 0).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList0Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList0()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 0).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 0).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList0Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray0()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 0).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray0Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList0()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 0).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList0Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList0()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 0).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 0).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList0Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray0()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 0).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray0Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList0()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 0).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList0Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList0()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 0).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 0).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList0Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray0()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 0).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray0Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList0()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 0).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList0Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList0()
        {
            var source = ZEnumerable.Repeat((short?) 1, 0).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 0).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList0Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray0()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 0).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray0Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList0()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 0).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList0Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList0()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 0).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 0).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList0Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray0()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 0).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray0Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList0()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 0).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList0Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList0()
        {
            var source = ZEnumerable.Repeat((int?) 1, 0).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 0).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList0Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray0()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 0).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray0Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList0()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 0).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList0Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList0()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 0).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 0).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList0Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray0()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 0).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray0Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList0()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 0).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList0Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList0()
        {
            var source = ZEnumerable.Repeat((long?) 1, 0).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 0).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList0Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray0()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 0).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray0Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList0()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 0).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList0Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList0()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 0).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 0).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList0Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray0()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 0).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray0Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList0()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 0).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList0Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList0()
        {
            var source = ZEnumerable.Repeat((float?) 1, 0).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 0).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList0Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray0()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 0).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray0Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList0()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 0).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList0Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList0()
        {
            var source = ZEnumerable.Repeat((double?) 1, 0).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 0).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList0Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray0()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 0).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray0Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList0()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 0).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList0Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList0ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList0ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 0).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList0()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 0).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList0Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 0).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList0Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList0MapNull()
        {
            var source = Enumerable.Range(1, 0).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray1()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 1).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 1).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray1Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList1()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 1).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 1).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList1Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList1()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 1).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 1).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList1Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray1()
        {
            var source = ZEnumerable.Repeat((byte) 1, 1).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 1).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray1Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList1()
        {
            var source = ZEnumerable.Repeat((byte) 1, 1).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 1).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList1Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList1()
        {
            var source = ZEnumerable.Repeat((byte) 1, 1).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 1).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList1Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray1()
        {
            var source = ZEnumerable.Repeat((short) 1, 1).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 1).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray1Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList1()
        {
            var source = ZEnumerable.Repeat((short) 1, 1).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 1).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList1Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList1()
        {
            var source = ZEnumerable.Repeat((short) 1, 1).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 1).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList1Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray1()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 1).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 1).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray1Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList1()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 1).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 1).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList1Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList1()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 1).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 1).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList1Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray1()
        {
            var source = ZEnumerable.Repeat((int) 1, 1).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 1).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray1Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList1()
        {
            var source = ZEnumerable.Repeat((int) 1, 1).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 1).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList1Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList1()
        {
            var source = ZEnumerable.Repeat((int) 1, 1).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 1).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList1Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray1()
        {
            var source = ZEnumerable.Repeat((uint) 1, 1).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 1).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray1Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList1()
        {
            var source = ZEnumerable.Repeat((uint) 1, 1).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 1).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList1Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList1()
        {
            var source = ZEnumerable.Repeat((uint) 1, 1).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 1).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList1Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray1()
        {
            var source = ZEnumerable.Repeat((long) 1, 1).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 1).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray1Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList1()
        {
            var source = ZEnumerable.Repeat((long) 1, 1).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 1).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList1Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList1()
        {
            var source = ZEnumerable.Repeat((long) 1, 1).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 1).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList1Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray1()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 1).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 1).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray1Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList1()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 1).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 1).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList1Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList1()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 1).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 1).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList1Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray1()
        {
            var source = ZEnumerable.Repeat((float) 1, 1).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 1).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray1Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList1()
        {
            var source = ZEnumerable.Repeat((float) 1, 1).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 1).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList1Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList1()
        {
            var source = ZEnumerable.Repeat((float) 1, 1).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 1).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList1Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray1()
        {
            var source = ZEnumerable.Repeat((double) 1, 1).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 1).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray1Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList1()
        {
            var source = ZEnumerable.Repeat((double) 1, 1).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 1).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList1Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList1()
        {
            var source = ZEnumerable.Repeat((double) 1, 1).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 1).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList1Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray1()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 1).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 1).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray1Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList1()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 1).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 1).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList1Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList1()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 1).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 1).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList1Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray1()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 1).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray1Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList1()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 1).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList1Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList1()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 1).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 1).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList1Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray1()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 1).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray1Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList1()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 1).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList1Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList1()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 1).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 1).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList1Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray1()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 1).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray1Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList1()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 1).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList1Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList1()
        {
            var source = ZEnumerable.Repeat((short?) 1, 1).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 1).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList1Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray1()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 1).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray1Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList1()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 1).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList1Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList1()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 1).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 1).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList1Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray1()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 1).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray1Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList1()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 1).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList1Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList1()
        {
            var source = ZEnumerable.Repeat((int?) 1, 1).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 1).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList1Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray1()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 1).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray1Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList1()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 1).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList1Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList1()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 1).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 1).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList1Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray1()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 1).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray1Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList1()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 1).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList1Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList1()
        {
            var source = ZEnumerable.Repeat((long?) 1, 1).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 1).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList1Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray1()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 1).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray1Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList1()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 1).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList1Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList1()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 1).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 1).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList1Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray1()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 1).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray1Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList1()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 1).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList1Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList1()
        {
            var source = ZEnumerable.Repeat((float?) 1, 1).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 1).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList1Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray1()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 1).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray1Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList1()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 1).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList1Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList1()
        {
            var source = ZEnumerable.Repeat((double?) 1, 1).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 1).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList1Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray1()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 1).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray1Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList1()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 1).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList1Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList1ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList1ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 1).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList1()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 1).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList1Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 1).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList1Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList1MapNull()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray2()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 2).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 2).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray2Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList2()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 2).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 2).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList2Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList2()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 2).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 2).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList2Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray2()
        {
            var source = ZEnumerable.Repeat((byte) 1, 2).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 2).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray2Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList2()
        {
            var source = ZEnumerable.Repeat((byte) 1, 2).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 2).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList2Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList2()
        {
            var source = ZEnumerable.Repeat((byte) 1, 2).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 2).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList2Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray2()
        {
            var source = ZEnumerable.Repeat((short) 1, 2).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray2Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList2()
        {
            var source = ZEnumerable.Repeat((short) 1, 2).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList2Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList2()
        {
            var source = ZEnumerable.Repeat((short) 1, 2).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList2Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray2()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray2Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList2()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList2Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList2()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList2Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray2()
        {
            var source = ZEnumerable.Repeat((int) 1, 2).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray2Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList2()
        {
            var source = ZEnumerable.Repeat((int) 1, 2).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList2Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList2()
        {
            var source = ZEnumerable.Repeat((int) 1, 2).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList2Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray2()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray2Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList2()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList2Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList2()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList2Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray2()
        {
            var source = ZEnumerable.Repeat((long) 1, 2).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray2Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList2()
        {
            var source = ZEnumerable.Repeat((long) 1, 2).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList2Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList2()
        {
            var source = ZEnumerable.Repeat((long) 1, 2).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList2Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray2()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray2Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList2()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList2Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList2()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList2Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray2()
        {
            var source = ZEnumerable.Repeat((float) 1, 2).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray2Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList2()
        {
            var source = ZEnumerable.Repeat((float) 1, 2).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList2Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList2()
        {
            var source = ZEnumerable.Repeat((float) 1, 2).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList2Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray2()
        {
            var source = ZEnumerable.Repeat((double) 1, 2).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray2Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList2()
        {
            var source = ZEnumerable.Repeat((double) 1, 2).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList2Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList2()
        {
            var source = ZEnumerable.Repeat((double) 1, 2).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList2Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray2()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray2Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList2()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList2Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList2()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList2Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray2()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 2).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray2Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList2()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 2).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList2Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList2()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 2).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 2).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList2Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray2()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 2).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray2Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList2()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 2).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList2Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList2()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 2).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 2).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList2Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray2()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray2Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList2()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList2Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList2()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList2Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray2()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray2Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList2()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList2Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList2()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList2Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray2()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray2Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList2()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList2Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList2()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList2Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray2()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray2Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList2()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList2Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList2()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList2Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray2()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray2Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList2()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList2Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList2()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList2Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray2()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray2Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList2()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList2Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList2()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList2Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray2()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray2Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList2()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList2Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList2()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList2Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray2()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray2Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList2()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList2Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList2()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList2Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray2()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray2Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList2()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList2Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList2ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList2()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList2Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList2MapNull()
        {
            var source = Enumerable.Range(1, 2).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray3()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 3).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 3).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray3Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList3()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 3).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 3).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList3Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList3()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 3).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 3).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList3Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray3()
        {
            var source = ZEnumerable.Repeat((byte) 1, 3).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 3).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray3Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList3()
        {
            var source = ZEnumerable.Repeat((byte) 1, 3).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 3).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList3Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList3()
        {
            var source = ZEnumerable.Repeat((byte) 1, 3).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 3).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList3Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray3()
        {
            var source = ZEnumerable.Repeat((short) 1, 3).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 3).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray3Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList3()
        {
            var source = ZEnumerable.Repeat((short) 1, 3).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 3).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList3Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList3()
        {
            var source = ZEnumerable.Repeat((short) 1, 3).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 3).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList3Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray3()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 3).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 3).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray3Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList3()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 3).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 3).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList3Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList3()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 3).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 3).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList3Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray3()
        {
            var source = ZEnumerable.Repeat((int) 1, 3).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 3).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray3Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList3()
        {
            var source = ZEnumerable.Repeat((int) 1, 3).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 3).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList3Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList3()
        {
            var source = ZEnumerable.Repeat((int) 1, 3).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 3).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList3Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray3()
        {
            var source = ZEnumerable.Repeat((uint) 1, 3).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 3).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray3Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList3()
        {
            var source = ZEnumerable.Repeat((uint) 1, 3).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 3).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList3Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList3()
        {
            var source = ZEnumerable.Repeat((uint) 1, 3).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 3).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList3Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray3()
        {
            var source = ZEnumerable.Repeat((long) 1, 3).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 3).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray3Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList3()
        {
            var source = ZEnumerable.Repeat((long) 1, 3).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 3).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList3Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList3()
        {
            var source = ZEnumerable.Repeat((long) 1, 3).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 3).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList3Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray3()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 3).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 3).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray3Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList3()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 3).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 3).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList3Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList3()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 3).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 3).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList3Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray3()
        {
            var source = ZEnumerable.Repeat((float) 1, 3).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 3).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray3Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList3()
        {
            var source = ZEnumerable.Repeat((float) 1, 3).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 3).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList3Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList3()
        {
            var source = ZEnumerable.Repeat((float) 1, 3).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 3).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList3Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray3()
        {
            var source = ZEnumerable.Repeat((double) 1, 3).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 3).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray3Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList3()
        {
            var source = ZEnumerable.Repeat((double) 1, 3).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 3).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList3Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList3()
        {
            var source = ZEnumerable.Repeat((double) 1, 3).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 3).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList3Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray3()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 3).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 3).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray3Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList3()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 3).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 3).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList3Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList3()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 3).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 3).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList3Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray3()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 3).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray3Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList3()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 3).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList3Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList3()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 3).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 3).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList3Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray3()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 3).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray3Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList3()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 3).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList3Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList3()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 3).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 3).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList3Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray3()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 3).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray3Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList3()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 3).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList3Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList3()
        {
            var source = ZEnumerable.Repeat((short?) 1, 3).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 3).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList3Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray3()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 3).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray3Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList3()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 3).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList3Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList3()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 3).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 3).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList3Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray3()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 3).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray3Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList3()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 3).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList3Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList3()
        {
            var source = ZEnumerable.Repeat((int?) 1, 3).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 3).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList3Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray3()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 3).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray3Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList3()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 3).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList3Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList3()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 3).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 3).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList3Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray3()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 3).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray3Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList3()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 3).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList3Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList3()
        {
            var source = ZEnumerable.Repeat((long?) 1, 3).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 3).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList3Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray3()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 3).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray3Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList3()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 3).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList3Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList3()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 3).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 3).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList3Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray3()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 3).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray3Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList3()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 3).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList3Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList3()
        {
            var source = ZEnumerable.Repeat((float?) 1, 3).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 3).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList3Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray3()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 3).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray3Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList3()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 3).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList3Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList3()
        {
            var source = ZEnumerable.Repeat((double?) 1, 3).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 3).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList3Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray3()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 3).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray3Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList3()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 3).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList3Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList3ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList3ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 3).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList3()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 3).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList3Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 3).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList3Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList3MapNull()
        {
            var source = Enumerable.Range(1, 3).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray4()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 4).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 4).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray4Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList4()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 4).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 4).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList4Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList4()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 4).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 4).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList4Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray4()
        {
            var source = ZEnumerable.Repeat((byte) 1, 4).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 4).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray4Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList4()
        {
            var source = ZEnumerable.Repeat((byte) 1, 4).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 4).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList4Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList4()
        {
            var source = ZEnumerable.Repeat((byte) 1, 4).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 4).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList4Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray4()
        {
            var source = ZEnumerable.Repeat((short) 1, 4).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 4).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray4Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList4()
        {
            var source = ZEnumerable.Repeat((short) 1, 4).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 4).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList4Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList4()
        {
            var source = ZEnumerable.Repeat((short) 1, 4).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 4).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList4Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray4()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 4).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 4).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray4Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList4()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 4).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 4).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList4Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList4()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 4).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 4).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList4Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray4()
        {
            var source = ZEnumerable.Repeat((int) 1, 4).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 4).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray4Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList4()
        {
            var source = ZEnumerable.Repeat((int) 1, 4).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 4).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList4Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList4()
        {
            var source = ZEnumerable.Repeat((int) 1, 4).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 4).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList4Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray4()
        {
            var source = ZEnumerable.Repeat((uint) 1, 4).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 4).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray4Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList4()
        {
            var source = ZEnumerable.Repeat((uint) 1, 4).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 4).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList4Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList4()
        {
            var source = ZEnumerable.Repeat((uint) 1, 4).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 4).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList4Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray4()
        {
            var source = ZEnumerable.Repeat((long) 1, 4).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 4).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray4Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList4()
        {
            var source = ZEnumerable.Repeat((long) 1, 4).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 4).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList4Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList4()
        {
            var source = ZEnumerable.Repeat((long) 1, 4).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 4).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList4Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray4()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 4).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 4).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray4Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList4()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 4).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 4).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList4Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList4()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 4).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 4).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList4Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray4()
        {
            var source = ZEnumerable.Repeat((float) 1, 4).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 4).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray4Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList4()
        {
            var source = ZEnumerable.Repeat((float) 1, 4).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 4).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList4Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList4()
        {
            var source = ZEnumerable.Repeat((float) 1, 4).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 4).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList4Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray4()
        {
            var source = ZEnumerable.Repeat((double) 1, 4).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 4).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray4Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList4()
        {
            var source = ZEnumerable.Repeat((double) 1, 4).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 4).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList4Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList4()
        {
            var source = ZEnumerable.Repeat((double) 1, 4).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 4).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList4Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray4()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 4).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 4).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray4Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList4()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 4).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 4).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList4Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList4()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 4).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 4).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList4Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray4()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 4).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray4Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList4()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 4).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList4Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList4()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 4).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 4).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList4Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray4()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 4).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray4Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList4()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 4).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList4Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList4()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 4).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 4).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList4Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray4()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 4).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray4Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList4()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 4).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList4Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList4()
        {
            var source = ZEnumerable.Repeat((short?) 1, 4).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 4).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList4Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray4()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 4).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray4Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList4()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 4).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList4Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList4()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 4).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 4).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList4Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray4()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 4).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray4Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList4()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 4).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList4Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList4()
        {
            var source = ZEnumerable.Repeat((int?) 1, 4).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 4).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList4Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray4()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 4).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray4Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList4()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 4).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList4Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList4()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 4).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 4).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList4Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray4()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 4).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray4Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList4()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 4).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList4Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList4()
        {
            var source = ZEnumerable.Repeat((long?) 1, 4).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 4).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList4Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray4()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 4).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray4Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList4()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 4).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList4Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList4()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 4).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 4).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList4Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray4()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 4).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray4Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList4()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 4).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList4Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList4()
        {
            var source = ZEnumerable.Repeat((float?) 1, 4).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 4).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList4Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray4()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 4).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray4Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList4()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 4).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList4Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList4()
        {
            var source = ZEnumerable.Repeat((double?) 1, 4).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 4).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList4Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray4()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 4).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray4Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList4()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 4).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList4Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList4ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList4ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 4).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList4()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 4).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList4Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 4).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList4Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList4MapNull()
        {
            var source = Enumerable.Range(1, 4).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
                        
            
        [TestMethod]
        public void TestSumsbyteArray100()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 100).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 100).ToArray();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteArray100Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteList100()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 100).ToList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 100).ToList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteList100Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteIList100()
        {
            var source = ZEnumerable.Repeat((sbyte) 1, 100).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte) 1 } , 100).ToIList();
            sbyte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte SumExpected = (sbyte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteIList100Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
                        
            
        [TestMethod]
        public void TestSumbyteArray100()
        {
            var source = ZEnumerable.Repeat((byte) 1, 100).ToArray();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 100).ToArray();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteArray100Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteList100()
        {
            var source = ZEnumerable.Repeat((byte) 1, 100).ToList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 100).ToList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteList100Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteIList100()
        {
            var source = ZEnumerable.Repeat((byte) 1, 100).ToIList();
            byte SumActual = ZEnumerable.Sum(source);
            byte SumExpected = (byte) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte) 1 } , 100).ToIList();
            byte SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte SumExpected = (byte) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteIList100Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray100()
        {
            var source = ZEnumerable.Repeat((short) 1, 100).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 100).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray100Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList100()
        {
            var source = ZEnumerable.Repeat((short) 1, 100).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 100).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList100Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList100()
        {
            var source = ZEnumerable.Repeat((short) 1, 100).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 100).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList100Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray100()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 100).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 100).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray100Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList100()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 100).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 100).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList100Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList100()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 100).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 100).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList100Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray100()
        {
            var source = ZEnumerable.Repeat((int) 1, 100).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 100).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray100Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList100()
        {
            var source = ZEnumerable.Repeat((int) 1, 100).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 100).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList100Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList100()
        {
            var source = ZEnumerable.Repeat((int) 1, 100).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 100).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList100Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray100()
        {
            var source = ZEnumerable.Repeat((uint) 1, 100).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 100).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray100Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList100()
        {
            var source = ZEnumerable.Repeat((uint) 1, 100).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 100).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList100Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList100()
        {
            var source = ZEnumerable.Repeat((uint) 1, 100).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 100).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList100Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray100()
        {
            var source = ZEnumerable.Repeat((long) 1, 100).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 100).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray100Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList100()
        {
            var source = ZEnumerable.Repeat((long) 1, 100).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 100).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList100Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList100()
        {
            var source = ZEnumerable.Repeat((long) 1, 100).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 100).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList100Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray100()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 100).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 100).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray100Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList100()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 100).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 100).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList100Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList100()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 100).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 100).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList100Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray100()
        {
            var source = ZEnumerable.Repeat((float) 1, 100).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 100).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray100Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList100()
        {
            var source = ZEnumerable.Repeat((float) 1, 100).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 100).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList100Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList100()
        {
            var source = ZEnumerable.Repeat((float) 1, 100).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 100).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList100Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray100()
        {
            var source = ZEnumerable.Repeat((double) 1, 100).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 100).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray100Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList100()
        {
            var source = ZEnumerable.Repeat((double) 1, 100).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 100).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList100Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList100()
        {
            var source = ZEnumerable.Repeat((double) 1, 100).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 100).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList100Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray100()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 100).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 100).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray100Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList100()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 100).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 100).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList100Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList100()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 100).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 100).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList100Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableArray100()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 100).ToArray();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableArray100Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableList100()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 100).ToList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableList100Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumsbyteNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((sbyte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumsbyteNullableIList100()
        {
            var source = ZEnumerable.Repeat((sbyte?) 1, 100).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumsbyteNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (sbyte?) 1 } , 100).ToIList();
            sbyte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            sbyte? SumExpected = (sbyte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumsbyteNullableIList100Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
                        
            
        [TestMethod]
        public void TestSumbyteNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableArray100()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).ToArray();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 100).ToArray();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableArray100Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableList100()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).ToList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 100).ToList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableList100Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumbyteNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((byte?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumbyteNullableIList100()
        {
            var source = ZEnumerable.Repeat((byte?) 1, 100).ToIList();
            byte? SumActual = ZEnumerable.Sum(source);
            byte? SumExpected = (byte?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumbyteNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (byte?) 1 } , 100).ToIList();
            byte? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            byte? SumExpected = (byte?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumbyteNullableIList100Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray100()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 100).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray100Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList100()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 100).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList100Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList100()
        {
            var source = ZEnumerable.Repeat((short?) 1, 100).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 100).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList100Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray100()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 100).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray100Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList100()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 100).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList100Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList100()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 100).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 100).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList100Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray100()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 100).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray100Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList100()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 100).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList100Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList100()
        {
            var source = ZEnumerable.Repeat((int?) 1, 100).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 100).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList100Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray100()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 100).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray100Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList100()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 100).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList100Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList100()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 100).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 100).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList100Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray100()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 100).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray100Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList100()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 100).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList100Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList100()
        {
            var source = ZEnumerable.Repeat((long?) 1, 100).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 100).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList100Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray100()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 100).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray100Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList100()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 100).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList100Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList100()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 100).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 100).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList100Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray100()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 100).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray100Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList100()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 100).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList100Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList100()
        {
            var source = ZEnumerable.Repeat((float?) 1, 100).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 100).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList100Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray100()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 100).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray100Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList100()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 100).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList100Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList100()
        {
            var source = ZEnumerable.Repeat((double?) 1, 100).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 100).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList100Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray100()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 100).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray100Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList100()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 100).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList100Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList100ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList100ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 100).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList100()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 100).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList100Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 100).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList100Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList100MapNull()
        {
            var source = Enumerable.Range(1, 100).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
            
        [TestMethod]
        public void TestSumsbyteArray2049Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteList2049Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteIList2049Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
            
        [TestMethod]
        public void TestSumbyteArray2049Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteList2049Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteIList2049Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray2049()
        {
            var source = ZEnumerable.Repeat((short) 1, 2049).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2049).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray2049Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList2049()
        {
            var source = ZEnumerable.Repeat((short) 1, 2049).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2049).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList2049Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList2049()
        {
            var source = ZEnumerable.Repeat((short) 1, 2049).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2049).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList2049Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray2049()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2049).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2049).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray2049Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList2049()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2049).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2049).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList2049Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList2049()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2049).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2049).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList2049Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray2049()
        {
            var source = ZEnumerable.Repeat((int) 1, 2049).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2049).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray2049Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList2049()
        {
            var source = ZEnumerable.Repeat((int) 1, 2049).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2049).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList2049Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList2049()
        {
            var source = ZEnumerable.Repeat((int) 1, 2049).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2049).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList2049Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray2049()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2049).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2049).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray2049Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList2049()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2049).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2049).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList2049Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList2049()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2049).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2049).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList2049Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray2049()
        {
            var source = ZEnumerable.Repeat((long) 1, 2049).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2049).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray2049Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList2049()
        {
            var source = ZEnumerable.Repeat((long) 1, 2049).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2049).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList2049Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList2049()
        {
            var source = ZEnumerable.Repeat((long) 1, 2049).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2049).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList2049Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray2049()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2049).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2049).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray2049Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList2049()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2049).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2049).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList2049Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList2049()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2049).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2049).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList2049Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray2049()
        {
            var source = ZEnumerable.Repeat((float) 1, 2049).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2049).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray2049Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList2049()
        {
            var source = ZEnumerable.Repeat((float) 1, 2049).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2049).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList2049Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList2049()
        {
            var source = ZEnumerable.Repeat((float) 1, 2049).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2049).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList2049Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray2049()
        {
            var source = ZEnumerable.Repeat((double) 1, 2049).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2049).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray2049Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList2049()
        {
            var source = ZEnumerable.Repeat((double) 1, 2049).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2049).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList2049Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList2049()
        {
            var source = ZEnumerable.Repeat((double) 1, 2049).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2049).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList2049Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray2049()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2049).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2049).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray2049Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList2049()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2049).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2049).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList2049Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList2049()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2049).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2049).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList2049Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
            
        [TestMethod]
        public void TestSumsbyteNullableArray2049Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteNullableList2049Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteNullableIList2049Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
            
        [TestMethod]
        public void TestSumbyteNullableArray2049Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteNullableList2049Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteNullableIList2049Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray2049()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2049).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray2049Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList2049()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2049).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList2049Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList2049()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2049).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2049).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList2049Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray2049()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2049).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray2049Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList2049()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2049).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList2049Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList2049()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2049).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2049).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList2049Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray2049()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2049).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray2049Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList2049()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2049).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList2049Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList2049()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2049).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2049).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList2049Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray2049()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2049).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray2049Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList2049()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2049).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList2049Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList2049()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2049).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2049).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList2049Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray2049()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2049).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray2049Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList2049()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2049).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList2049Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList2049()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2049).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2049).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList2049Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray2049()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2049).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray2049Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList2049()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2049).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList2049Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList2049()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2049).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2049).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList2049Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray2049()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2049).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray2049Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList2049()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2049).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList2049Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList2049()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2049).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2049).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList2049Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray2049()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2049).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray2049Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList2049()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2049).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList2049Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList2049()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2049).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2049).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList2049Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray2049()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2049).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray2049Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList2049()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2049).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList2049Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList2049ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2049ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2049).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList2049()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2049).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2049Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2049).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList2049Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList2049MapNull()
        {
            var source = Enumerable.Range(1, 2049).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
                
            #region sbyte             
            
            
        [TestMethod]
        public void TestSumsbyteArray2051Null()
        {        
            sbyte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToArray();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteList2051Null()
        {        
            List<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteIList2051Null()
        {        
            IList<sbyte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte,sbyte>((sbyte) arg, (sbyte) arg)).ToIList();
            Func<KeyValuePair<sbyte, sbyte>, sbyte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte             
            
            
        [TestMethod]
        public void TestSumbyteArray2051Null()
        {        
            byte[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToArray();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteList2051Null()
        {        
            List<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteIList2051Null()
        {        
            IList<byte> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte,byte>((byte) arg, (byte) arg)).ToIList();
            Func<KeyValuePair<byte, byte>, byte> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short             
            
                        
            
        [TestMethod]
        public void TestSumshortArray2051()
        {
            var source = ZEnumerable.Repeat((short) 1, 2051).ToArray();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2051).ToArray();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortArray2051Null()
        {        
            short[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToArray();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortList2051()
        {
            var source = ZEnumerable.Repeat((short) 1, 2051).ToList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2051).ToList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortList2051Null()
        {        
            List<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortIList2051()
        {
            var source = ZEnumerable.Repeat((short) 1, 2051).ToIList();
            short SumActual = ZEnumerable.Sum(source);
            short SumExpected = (short) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short) 1 } , 2051).ToIList();
            short SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short SumExpected = (short) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortIList2051Null()
        {        
            IList<short> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short,short>((short) arg, (short) arg)).ToIList();
            Func<KeyValuePair<short, short>, short> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort             
            
                        
            
        [TestMethod]
        public void TestSumushortArray2051()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2051).ToArray();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2051).ToArray();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortArray2051Null()
        {        
            ushort[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToArray();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortList2051()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2051).ToList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2051).ToList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortList2051Null()
        {        
            List<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortIList2051()
        {
            var source = ZEnumerable.Repeat((ushort) 1, 2051).ToIList();
            ushort SumActual = ZEnumerable.Sum(source);
            ushort SumExpected = (ushort) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort) 1 } , 2051).ToIList();
            ushort SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort SumExpected = (ushort) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortIList2051Null()
        {        
            IList<ushort> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort,ushort>((ushort) arg, (ushort) arg)).ToIList();
            Func<KeyValuePair<ushort, ushort>, ushort> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int             
            
                        
            
        [TestMethod]
        public void TestSumintArray2051()
        {
            var source = ZEnumerable.Repeat((int) 1, 2051).ToArray();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2051).ToArray();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintArray2051Null()
        {        
            int[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToArray();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintList2051()
        {
            var source = ZEnumerable.Repeat((int) 1, 2051).ToList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2051).ToList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintList2051Null()
        {        
            List<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintIList2051()
        {
            var source = ZEnumerable.Repeat((int) 1, 2051).ToIList();
            int SumActual = ZEnumerable.Sum(source);
            int SumExpected = (int) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int) 1 } , 2051).ToIList();
            int SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int SumExpected = (int) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintIList2051Null()
        {        
            IList<int> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int,int>((int) arg, (int) arg)).ToIList();
            Func<KeyValuePair<int, int>, int> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint             
            
                        
            
        [TestMethod]
        public void TestSumuintArray2051()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2051).ToArray();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2051).ToArray();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintArray2051Null()
        {        
            uint[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToArray();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintList2051()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2051).ToList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2051).ToList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintList2051Null()
        {        
            List<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintIList2051()
        {
            var source = ZEnumerable.Repeat((uint) 1, 2051).ToIList();
            uint SumActual = ZEnumerable.Sum(source);
            uint SumExpected = (uint) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint) 1 } , 2051).ToIList();
            uint SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint SumExpected = (uint) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintIList2051Null()
        {        
            IList<uint> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint,uint>((uint) arg, (uint) arg)).ToIList();
            Func<KeyValuePair<uint, uint>, uint> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long             
            
                        
            
        [TestMethod]
        public void TestSumlongArray2051()
        {
            var source = ZEnumerable.Repeat((long) 1, 2051).ToArray();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2051).ToArray();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongArray2051Null()
        {        
            long[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToArray();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongList2051()
        {
            var source = ZEnumerable.Repeat((long) 1, 2051).ToList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2051).ToList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongList2051Null()
        {        
            List<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongIList2051()
        {
            var source = ZEnumerable.Repeat((long) 1, 2051).ToIList();
            long SumActual = ZEnumerable.Sum(source);
            long SumExpected = (long) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long) 1 } , 2051).ToIList();
            long SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long SumExpected = (long) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongIList2051Null()
        {        
            IList<long> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long,long>((long) arg, (long) arg)).ToIList();
            Func<KeyValuePair<long, long>, long> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong             
            
                        
            
        [TestMethod]
        public void TestSumulongArray2051()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2051).ToArray();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2051).ToArray();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongArray2051Null()
        {        
            ulong[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToArray();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongList2051()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2051).ToList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2051).ToList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongList2051Null()
        {        
            List<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongIList2051()
        {
            var source = ZEnumerable.Repeat((ulong) 1, 2051).ToIList();
            ulong SumActual = ZEnumerable.Sum(source);
            ulong SumExpected = (ulong) Enumerable.Sum(source.Select(x=> (long)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong) 1 } , 2051).ToIList();
            ulong SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong SumExpected = (ulong) Enumerable.Sum(source, arg => (long) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongIList2051Null()
        {        
            IList<ulong> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong,ulong>((ulong) arg, (ulong) arg)).ToIList();
            Func<KeyValuePair<ulong, ulong>, ulong> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float             
            
                        
            
        [TestMethod]
        public void TestSumfloatArray2051()
        {
            var source = ZEnumerable.Repeat((float) 1, 2051).ToArray();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2051).ToArray();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatArray2051Null()
        {        
            float[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToArray();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatList2051()
        {
            var source = ZEnumerable.Repeat((float) 1, 2051).ToList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2051).ToList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatList2051Null()
        {        
            List<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatIList2051()
        {
            var source = ZEnumerable.Repeat((float) 1, 2051).ToIList();
            float SumActual = ZEnumerable.Sum(source);
            float SumExpected = (float) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float) 1 } , 2051).ToIList();
            float SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float SumExpected = (float) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatIList2051Null()
        {        
            IList<float> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float,float>((float) arg, (float) arg)).ToIList();
            Func<KeyValuePair<float, float>, float> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double             
            
                        
            
        [TestMethod]
        public void TestSumdoubleArray2051()
        {
            var source = ZEnumerable.Repeat((double) 1, 2051).ToArray();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2051).ToArray();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleArray2051Null()
        {        
            double[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToArray();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleList2051()
        {
            var source = ZEnumerable.Repeat((double) 1, 2051).ToList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2051).ToList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleList2051Null()
        {        
            List<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleIList2051()
        {
            var source = ZEnumerable.Repeat((double) 1, 2051).ToIList();
            double SumActual = ZEnumerable.Sum(source);
            double SumExpected = (double) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double) 1 } , 2051).ToIList();
            double SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double SumExpected = (double) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleIList2051Null()
        {        
            IList<double> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double,double>((double) arg, (double) arg)).ToIList();
            Func<KeyValuePair<double, double>, double> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal             
            
                        
            
        [TestMethod]
        public void TestSumdecimalArray2051()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2051).ToArray();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2051).ToArray();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalArray2051Null()
        {        
            decimal[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToArray();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalList2051()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2051).ToList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2051).ToList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalList2051Null()
        {        
            List<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalIList2051()
        {
            var source = ZEnumerable.Repeat((decimal) 1, 2051).ToIList();
            decimal SumActual = ZEnumerable.Sum(source);
            decimal SumExpected = (decimal) Enumerable.Sum(source.Select(x=> (double)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal) 1 } , 2051).ToIList();
            decimal SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal SumExpected = (decimal) Enumerable.Sum(source, arg => (double) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalIList2051Null()
        {        
            IList<decimal> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal,decimal>((decimal) arg, (decimal) arg)).ToIList();
            Func<KeyValuePair<decimal, decimal>, decimal> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region sbyte?             
            
            
        [TestMethod]
        public void TestSumsbyteNullableArray2051Null()
        {        
            sbyte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToArray();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteNullableList2051Null()
        {        
            List<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumsbyteNullableIList2051Null()
        {        
            IList<sbyte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumsbyteNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<sbyte?,sbyte?>((sbyte?) arg, (sbyte?) arg)).ToIList();
            Func<KeyValuePair<sbyte?, sbyte?>, sbyte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region byte?             
            
            
        [TestMethod]
        public void TestSumbyteNullableArray2051Null()
        {        
            byte?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToArray();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteNullableList2051Null()
        {        
            List<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
            
        [TestMethod]
        public void TestSumbyteNullableIList2051Null()
        {        
            IList<byte?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumbyteNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<byte?,byte?>((byte?) arg, (byte?) arg)).ToIList();
            Func<KeyValuePair<byte?, byte?>, byte?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region short?             
            
                        
            
        [TestMethod]
        public void TestSumshortNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableArray2051()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).ToArray();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2051).ToArray();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableArray2051Null()
        {        
            short?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToArray();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableList2051()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).ToList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2051).ToList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableList2051Null()
        {        
            List<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumshortNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((short?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumshortNullableIList2051()
        {
            var source = ZEnumerable.Repeat((short?) 1, 2051).ToIList();
            short? SumActual = ZEnumerable.Sum(source);
            short? SumExpected = (short?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumshortNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (short?) 1 } , 2051).ToIList();
            short? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            short? SumExpected = (short?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumshortNullableIList2051Null()
        {        
            IList<short?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumshortNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<short?,short?>((short?) arg, (short?) arg)).ToIList();
            Func<KeyValuePair<short?, short?>, short?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ushort?             
            
                        
            
        [TestMethod]
        public void TestSumushortNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableArray2051()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2051).ToArray();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableArray2051Null()
        {        
            ushort?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToArray();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableList2051()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).ToList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2051).ToList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableList2051Null()
        {        
            List<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumushortNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ushort?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumushortNullableIList2051()
        {
            var source = ZEnumerable.Repeat((ushort?) 1, 2051).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumushortNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ushort?) 1 } , 2051).ToIList();
            ushort? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ushort? SumExpected = (ushort?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumushortNullableIList2051Null()
        {        
            IList<ushort?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumushortNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ushort?,ushort?>((ushort?) arg, (ushort?) arg)).ToIList();
            Func<KeyValuePair<ushort?, ushort?>, ushort?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region int?             
            
                        
            
        [TestMethod]
        public void TestSumintNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableArray2051()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).ToArray();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2051).ToArray();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableArray2051Null()
        {        
            int?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToArray();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableList2051()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).ToList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2051).ToList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableList2051Null()
        {        
            List<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumintNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((int?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumintNullableIList2051()
        {
            var source = ZEnumerable.Repeat((int?) 1, 2051).ToIList();
            int? SumActual = ZEnumerable.Sum(source);
            int? SumExpected = (int?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumintNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (int?) 1 } , 2051).ToIList();
            int? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            int? SumExpected = (int?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumintNullableIList2051Null()
        {        
            IList<int?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumintNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<int?,int?>((int?) arg, (int?) arg)).ToIList();
            Func<KeyValuePair<int?, int?>, int?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region uint?             
            
                        
            
        [TestMethod]
        public void TestSumuintNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableArray2051()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).ToArray();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2051).ToArray();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableArray2051Null()
        {        
            uint?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToArray();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableList2051()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).ToList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2051).ToList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableList2051Null()
        {        
            List<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumuintNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((uint?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumuintNullableIList2051()
        {
            var source = ZEnumerable.Repeat((uint?) 1, 2051).ToIList();
            uint? SumActual = ZEnumerable.Sum(source);
            uint? SumExpected = (uint?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumuintNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (uint?) 1 } , 2051).ToIList();
            uint? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            uint? SumExpected = (uint?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumuintNullableIList2051Null()
        {        
            IList<uint?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumuintNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<uint?,uint?>((uint?) arg, (uint?) arg)).ToIList();
            Func<KeyValuePair<uint?, uint?>, uint?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region long?             
            
                        
            
        [TestMethod]
        public void TestSumlongNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableArray2051()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).ToArray();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2051).ToArray();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableArray2051Null()
        {        
            long?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToArray();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableList2051()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).ToList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2051).ToList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableList2051Null()
        {        
            List<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumlongNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((long?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumlongNullableIList2051()
        {
            var source = ZEnumerable.Repeat((long?) 1, 2051).ToIList();
            long? SumActual = ZEnumerable.Sum(source);
            long? SumExpected = (long?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumlongNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (long?) 1 } , 2051).ToIList();
            long? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            long? SumExpected = (long?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumlongNullableIList2051Null()
        {        
            IList<long?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumlongNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<long?,long?>((long?) arg, (long?) arg)).ToIList();
            Func<KeyValuePair<long?, long?>, long?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region ulong?             
            
                        
            
        [TestMethod]
        public void TestSumulongNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableArray2051()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2051).ToArray();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableArray2051Null()
        {        
            ulong?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToArray();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableList2051()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).ToList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2051).ToList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableList2051Null()
        {        
            List<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumulongNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((ulong?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumulongNullableIList2051()
        {
            var source = ZEnumerable.Repeat((ulong?) 1, 2051).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source.Select(x=> (long?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumulongNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (ulong?) 1 } , 2051).ToIList();
            ulong? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            ulong? SumExpected = (ulong?) Enumerable.Sum(source, arg => (long?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumulongNullableIList2051Null()
        {        
            IList<ulong?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumulongNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<ulong?,ulong?>((ulong?) arg, (ulong?) arg)).ToIList();
            Func<KeyValuePair<ulong?, ulong?>, ulong?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region float?             
            
                        
            
        [TestMethod]
        public void TestSumfloatNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableArray2051()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).ToArray();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2051).ToArray();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableArray2051Null()
        {        
            float?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToArray();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableList2051()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).ToList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2051).ToList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableList2051Null()
        {        
            List<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumfloatNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((float?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumfloatNullableIList2051()
        {
            var source = ZEnumerable.Repeat((float?) 1, 2051).ToIList();
            float? SumActual = ZEnumerable.Sum(source);
            float? SumExpected = (float?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumfloatNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (float?) 1 } , 2051).ToIList();
            float? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            float? SumExpected = (float?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumfloatNullableIList2051Null()
        {        
            IList<float?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumfloatNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<float?,float?>((float?) arg, (float?) arg)).ToIList();
            Func<KeyValuePair<float?, float?>, float?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region double?             
            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableArray2051()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).ToArray();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2051).ToArray();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableArray2051Null()
        {        
            double?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToArray();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableList2051()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).ToList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2051).ToList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableList2051Null()
        {        
            List<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdoubleNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((double?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdoubleNullableIList2051()
        {
            var source = ZEnumerable.Repeat((double?) 1, 2051).ToIList();
            double? SumActual = ZEnumerable.Sum(source);
            double? SumExpected = (double?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdoubleNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (double?) 1 } , 2051).ToIList();
            double? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            double? SumExpected = (double?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdoubleNullableIList2051Null()
        {        
            IList<double?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdoubleNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<double?,double?>((double?) arg, (double?) arg)).ToIList();
            Func<KeyValuePair<double?, double?>, double?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
            #region decimal?             
            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableArray2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToArray();
            var source = baseCol.Select(x => new { X = x } ).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableArray2051()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableArray2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2051).ToArray();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableArray2051Null()
        {        
            decimal?[] nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableArray2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToArray();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToList();
            var source = baseCol.Select(x => new { X = x } ).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableList2051()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).ToList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2051).ToList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableList2051Null()
        {        
            List<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

            
                        
            
        [TestMethod]
        public void TestSumdecimalNullableIList2051ThreatNulls()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?) x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2051ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((decimal?) 1, 2051).Select((x, i) => i%3==0 ? x : null).ToIList();
            var source = baseCol.Select(x => new { X = x } ).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            
        [TestMethod]
        public void TestSumdecimalNullableIList2051()
        {
            var source = ZEnumerable.Repeat((decimal?) 1, 2051).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source.Select(x=> (double?)x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSumdecimalNullableIList2051Map()
        {
            var source = ZEnumerable.Repeat(new { X = (decimal?) 1 } , 2051).ToIList();
            decimal? SumActual = ZEnumerable.Sum(source, arg => arg.X);
            decimal? SumExpected = (decimal?) Enumerable.Sum(source, arg => (double?) arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

            
        [TestMethod]
        public void TestSumdecimalNullableIList2051Null()
        {        
            IList<decimal?> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

        [TestMethod]
        public void TestSumdecimalNullableIList2051MapNull()
        {
            var source = Enumerable.Range(1, 2051).Select(arg => new KeyValuePair<decimal?,decimal?>((decimal?) arg, (decimal?) arg)).ToIList();
            Func<KeyValuePair<decimal?, decimal?>, decimal?> map = null;
            try
            {
                ZEnumerable.Sum(source, map);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
        }

                
        #endregion
        


    
    }
}