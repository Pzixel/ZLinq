<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using ZLinq.Test.Helpers;

namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Sum
    {                            
    <#foreach (var type in TT.WithNullables(TT.NumberTypes)) { 
        string typeName = TT.GetNullableName(type); #>
        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) { 
        string name = TT.GetCollectionName(sourceType);#>    

        <# foreach(int i in TT.TestSizes) { #>

        <# if (TT.CanBeRepresented(type, i)) { #>
                
            <# if (TT.IsNullable(type)) { #>

        [TestMethod]
        public void TestSum<#= typeName #><#= name #><#= i #>ThreatNulls()
        {
            var source = ZEnumerable.Repeat((<#= type #>) 1, <#= i #>).Select((x, i) => i%3==0 ? x : null).To<#= name #>();
            <#= type #> SumActual = ZEnumerable.Sum(source);
            <#= type #> SumExpected = (<#= type #>) Enumerable.Sum(source.Select(x=> <#= TT.Expand(type) #> x ?? 0));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSum<#= typeName #><#= name #><#= i #>ThreatNullsMap()
        {
            var baseCol = ZEnumerable.Repeat((<#= type #>) 1, <#= i #>).Select((x, i) => i%3==0 ? x : null).To<#= name #>();
            var source = baseCol.Select(x => new { X = x } ).To<#= name #>();
            <#= type #> SumActual = ZEnumerable.Sum(source, arg => arg.X);
            <#= type #> SumExpected = (<#= type #>) Enumerable.Sum(source, arg => <#= TT.Expand(type) #> arg.X ?? 0);        
            Assert.AreEqual(SumExpected, SumActual);
        }
            <# } #>

        [TestMethod]
        public void TestSum<#= typeName #><#= name #><#= i #>()
        {
            var source = ZEnumerable.Repeat((<#= type #>) 1, <#= i #>).To<#= name #>();
            <#= type #> SumActual = ZEnumerable.Sum(source);
            <#= type #> SumExpected = (<#= type #>) Enumerable.Sum(source.Select(x=> <#= TT.Expand(type) #>x));          
            Assert.AreEqual(SumExpected, SumActual);
        }
           
        [TestMethod]
        public void TestSum<#= typeName #><#= name #><#= i #>Map()
        {
            var source = ZEnumerable.Repeat(new { X = (<#= type #>) 1 } , <#= i #>).To<#= name #>();
            <#= type #> SumActual = ZEnumerable.Sum(source, arg => arg.X);
            <#= type #> SumExpected = (<#= type #>) Enumerable.Sum(source, arg => <#= TT.Expand(type) #> arg.X);        
            Assert.AreEqual(SumExpected, SumActual);
        }

        <# } #>
        
        <# }#>
    
        [TestMethod]
        public void TestSum<#= typeName #><#= name #>NullOrEmpty()
        {        
            <#= sourceType.Replace("T", type) #> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            <#= sourceType.Replace("T", type) #> emptySource = new <#= type #>[0].To<#= name #>();
            var sum = ZEnumerable.Sum(emptySource);
            Assert.AreEqual(sum, (<#= type #>) 0);
        }

        [TestMethod]
        public void TestSum<#= typeName #><#= name #>MapNullOrEmpty()
        {
            var source = Enumerable.Range(1, 1).Select(arg => new KeyValuePair<<#= type #>,<#= type #>>((<#= type #>) arg, (<#= type #>) arg)).To<#= name #>();
            Func<KeyValuePair<<#= type #>, <#= type #>>, <#= type #>> nullMap = null;
            <#= sourceType.Replace("T", type) #> nullSource = null;

            try
            {
                ZEnumerable.Sum(nullSource);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }

            try
            {
                ZEnumerable.Sum(source, nullMap);                
                Assert.Fail();
            }
            catch (ArgumentNullException)
            {
                
            }
            
            var emptySource = source.Take(0).To<#= name #>();
            var sum = ZEnumerable.Sum(emptySource, x => (<#= type #>) x.Key);
            Assert.AreEqual(sum, (<#= type #>) 0);           
        }

        <# } #>
        
        #endregion
    <# } #>    

    }
}