<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ZLinq.TTHelp\bin\$(Configuration)\ZLinq.TTHelp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ZLinq.TTHelp" #>
<#@ output extension=".cs" #>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using ZLinq.Test.Helpers;


// ReSharper disable RedundantCast
namespace ZLinq.Test.ZMath
{
    [TestClass]
    public class Average
    {            
        private const double Tolerance = 0.0000001;
                    
    <#foreach (var type in TT.WithNullables(TT.NumberTypes)) { #>

        #region <#= type #>             
        <# foreach (string sourceType in TT.StandardLists) {
            string name = TT.GetCollectionName(sourceType);
            string typeName = TT.GetNullableName(type);
            bool isInteger = !TT.IsFloat(type);
            string trimmedType = type.TrimEnd('?');
            string expectedVal = isInteger ? trimmedType + ".MaxValue/10*9" : "short.MaxValue";
         #>    

         
        <# foreach(int i in TT.TestSizes) { #>
        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #>()
        {            
            const <#= trimmedType #> expected = <#= expectedVal #>;
            var source = Enumerable.Repeat((<#= type #>) expected, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source);

            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }

        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #>Map()
        {
            const <#= trimmedType #> expected = <#= expectedVal #>;
            var source = Enumerable.Repeat(new { X = expected}, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source, arg => (<#= type #>) arg.X);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }

        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #>Min()
        {            
            const <#= trimmedType #> expected = <#= 1 #>;
            var source = Enumerable.Repeat((<#= type #>) expected, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source);

            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }

        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #><#= i #>MapMin()
        {
            const <#= trimmedType #> expected = <#= 1 #>;
            var source = Enumerable.Repeat(new { X = expected}, <#= i #>).To<#= name #>();

            double result = ZEnumerable.Average(source, arg => (<#= type #>) arg.X);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }
          
        <# } #>

        <# if (isInteger) { #>        
        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #>NoOverflow()
        {
            const <#= trimmedType #> expected = <#= trimmedType #>.MaxValue;
            var source = Enumerable.Repeat((<#= type #>) expected, 2).To<#= name #>();
            double result = ZEnumerable.Average(source);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }
        
        [TestMethod]
        public void TestAverage<#= typeName #><#= TT.GetCollectionName(sourceType) #>MapNoOverflow()
        {    
            const <#= trimmedType #> expected = <#= trimmedType #>.MaxValue;
            var source =  Enumerable.Repeat(new { X = (<#= type #>) expected} , 2).To<#= name #>();
            double result = ZEnumerable.Average(source, arg => arg.X);
            <#= TT.AssertFloatsRelative("result", "expected", "Tolerance") #>
        }
        <# } #>
        <# } #>
        
        #endregion
    <# } #>  
    }
}